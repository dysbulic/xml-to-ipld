{"version":3,"sources":["util.js","utils/content.js","utils/types.js","utils/structures.js","App.jsx","reportWebVitals.js","index.jsx"],"names":["ipfs","ipfsClient","port","camelCase","str","sep","split","map","part","i","toUpperCase","slice","join","nodeToJSON","node","children","depth","left","right","json","name","localName","type","nodeType","Node","ELEMENT_NODE","TEXT_NODE","ATTRIBUTE_NODE","CDATA_SECTION_NODE","ENTITY_REFERENCE_NODE","ENTITY_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","NOTATION_NODE","value","textContent","test","length","attributes","Object","fromEntries","attr","rule","val","trim","filter","e","some","t","keys","optDeref","a","CID","isCID","dag","get","cleanAttributes","attrs","entries","style","prop","class","className","buildDOM","root","key","onProcessing","onCompleting","onDOMStart","onDOMFinish","onChildElem","Error","values","child","Promise","all","sub","includes","dom","push","text","c","elem","React","createElement","console","error","parsererrorNS","DOMParser","parseFromString","getElementsByTagName","namespaceURI","isParseError","doc","getElementsByTagNameNS","getDoc","file","resolve","reject","reader","FileReader","onload","event","parser","xml","target","result","toString","html","firstChild","b","arraysEqual","Array","from","childNodes","n","head","body","list","typeOf","allOfType","readAsText","toTree","obj","leafFor","out","isArray","v","dfs","count","current","pre","step","nodeFor","childrenOf","forEach","ForcedGraph","loadable","isNum","maybe","fixViewBox","xmlns","w","width","h","height","viewBox","useState","content","setContent","docTransforms","useEffect","info","load","evt","files","data","btoa","documentElement","put","cid","warn","message","graph","nodes","_","id","links","source","align","direction","mt","listStyleType","_before","onChange","minH","maxW","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.7f0bb6b6.chunk.js","sourcesContent":["import ipfsClient from 'ipfs-http-client'\nimport React from 'react'\nimport CID from 'cids'\n\nexport const ipfs = ipfsClient({ port: 5001 })\n\nexport const toIPLD = async (obj) => {\n  return await ipfs.dag.put(obj)\n}\n\nexport const camelCase = (str, sep = '-') => (\n  str.split(sep)\n  .map((part, i) => {\n    if(i === 0) {\n      return part\n    } else {\n      return part[0].toUpperCase() + part.slice(1)\n    }\n  })\n  .join('')\n)\n\nexport const nodeToJSON = ({\n  node, children, depth, left, right\n}) => {\n  const json = {\n    name: node.localName, children,\n    depth, left, right,\n  }\n  json.type = ((() => {\n    switch(node.nodeType) {\n    case Node.ELEMENT_NODE: return 'element'\n    case Node.TEXT_NODE: return 'text'\n    case Node.ATTRIBUTE_NODE: return 'attribute'\n    case Node.CDATA_SECTION_NODE: return 'cdata'\n    case Node.ENTITY_REFERENCE_NODE: return 'reference'\n    case Node.ENTITY_NODE: return 'entity'\n    case Node.PROCESSING_INSTRUCTION_NODE: return 'instruction'\n    case Node.COMMENT_NODE: return 'comment'\n    case Node.DOCUMENT_NODE: return 'document'\n    case Node.DOCUMENT_TYPE_NODE: return 'doctype'\n    case Node.DOCUMENT_FRAGMENT_NODE: return 'fragment'\n    case Node.NOTATION_NODE: return 'notation'\n    default: return 'unknown'\n    }\n  })())\n  if(json.type === 'text' || json.type === 'cdata') {\n    delete json.name\n    json.value = node.textContent\n    if(/^\\n\\s*$/.test(json.value)) {\n      return null // Don't save inter-element whitespace\n    }\n  }\n  if(children.length === 0) {\n    delete json.children\n  }\n  json.attributes = Object.fromEntries(\n    [...node.attributes ?? []].map((attr) => {\n      let value = attr.value\n      if(attr.name === 'style') {\n        value = Object.fromEntries(\n          attr.value.split(';').map(\n            (rule) => {\n              const [name, ...val] = rule.split(':')\n              return [camelCase(name.trim()), val.join().trim()]\n            }\n          )\n          .filter(e => e.some(t => /\\S/.test(t)))\n        )\n      }\n      return [attr.name, value]\n    })\n  )\n  if(Object.keys(json.attributes).length === 0) {\n    delete json.attributes\n  }\n  return json\n}\n\n// Dereference a CID if the node is one\nconst optDeref = async (node) => {\n  if(CID.isCID(node)) {\n    return (await ipfs.dag.get(node)).value\n  }\n  return node\n}\n\nconst cleanAttributes = async (attributes) => {\n  attributes = await optDeref(attributes ?? {})\n\n  const attrs = {}\n  for(let [name, val] of Object.entries(attributes)) {\n    attrs[name] = await optDeref(val)\n  }\n\n  if(attrs.style) {\n    const style = {}\n    for(let [prop, val] of (\n      Object.entries(attrs.style)\n    )) {\n      style[camelCase(prop, '-')] = val\n    }\n    attrs.style = style\n  }\n\n  if(attrs.class) {\n    attrs.className = attrs.class\n    delete attrs.class\n  }\n  for(let attr of ['xml:space', 'xmlns:xlink', 'xlink:href']) {\n    if(attrs[attr]) {\n      attrs[camelCase(attr, ':')] = attrs[attr]\n      delete attrs[attr]\n    }\n  }\n  for(let attr of [\n    'flood-opacity', 'flood-color', 'stop-color',\n    'clip-rule',\n  ]) {\n    if(attrs[attr]) {\n      attrs[camelCase(attr, '-')] = attrs[attr]\n      delete attrs[attr]\n    }\n  }\n\n  return attrs\n}\n\nexport const buildDOM = async ({\n  root, key = { val: 0 },\n  onProcessing = null, onCompleting = null,\n  onDOMStart = null, onDOMFinish = null,\n  onChildElem = null,\n}) => {\n  if(root.type !== 'element') {\n    throw new Error(`Root Type: ${root.type}`)\n  }\n  onProcessing?.({ node: root })\n  const children = []\n  for(let child of Object.values(\n    await optDeref(root.children ?? [])\n  )) {\n    child = await optDeref(child)\n    if(child.type === 'element') {\n      onDOMStart?.({ child })\n      child.children = await Promise.all(\n        Object.values(\n          await optDeref(child.children ?? [])\n        )\n        .map(optDeref)\n      )\n      if(\n        child.children.length === 0\n        || child.children.some(\n          (sub) => (\n            !['text', 'cdata'].includes(sub.type)\n          )\n        )\n      ) {\n        // if there are non-text nodes, recurse\n        const dom = await (\n          buildDOM({\n            root: child, key,\n            onProcessing, onCompleting,\n            onDOMStart, onDOMFinish,\n            onChildElem,\n          })\n        )\n        onDOMFinish?.({ child, node: dom })\n        children.push(dom)\n      } else {\n        // otherwise build a node\n        const attrs = await cleanAttributes(child.attributes)\n        attrs.key = ++key.val\n\n        const text = (\n          child.children.map(c => c.value).join()\n        )\n        const elem = (\n          React.createElement(child.name, attrs, text)\n        )\n        onChildElem?.({ child, node: elem })\n        children.push(elem)\n      }\n    } else if(child.value && child.value.trim() !== '') {\n      console.error('Child', child.value)\n    }\n  }\n  const attrs = await cleanAttributes(root.attributes)\n  attrs.key = ++key.val\n  const elem = React.createElement(\n    root.name, attrs, children.length > 0 ? children : null\n  )\n  onCompleting?.(root, elem)\n  return elem\n}\n","import { arraysEqual, allOfType } from './types'\n\nexport const parsererrorNS = (() => (\n  (new DOMParser())\n  .parseFromString('INVALID', 'application/xml')\n  .getElementsByTagName('parsererror')[0]\n  .namespaceURI\n))()\n\nexport const isParseError = (doc) => (\n  doc.getElementsByTagNameNS(\n    parsererrorNS, 'parsererror'\n  ).length > 0\n)\n\n// Return the contents of a file returned from\n// a form input. It first tries as XML. If that\n// succeeds, the DOM is returned. Next HTML is\n// tried. Most files (txt, png, m4a, etc.) are\n// inserted into a simple HTML document. HTML\n// produces a DOM which is returned.\nexport const getDoc = (file) => (\n  new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onload = (event) => {\n      const parser = new DOMParser()\n      const xml = parser.parseFromString(\n        event.target.result.toString(), 'application/xml'\n      )\n      if(!isParseError(xml)) {\n        return resolve(xml)\n      }\n      const html = parser.parseFromString(\n        event.target.result.toString(), 'text/html'\n      )\n      if(isParseError(html)) {\n        return resolve(null)\n      }\n      // Browsers will wrap the contents of any\n      // file in a <html><head/><body>…</body></html>\n      // structure.\n      if(\n        html.firstChild.localName === 'html'\n        && arraysEqual(\n          Array.from(html.firstChild.childNodes)\n          .map(n => n.localName),\n          ['head', 'body'],\n        )\n      ) {\n        const head = html.firstChild.firstChild\n        const body = html.firstChild.childNodes[1]\n        if(\n          head.childNodes.length === 0\n          && allOfType(\n            body.childNodes, Node.TEXT_NODE\n          )\n        ) {\n          const text = (\n            Array.from(body.childNodes)\n            .map(n => n.textContent)\n            .join()\n          )\n          return resolve(text)\n        }\n        return resolve(html)\n      }\n    }\n    reader.readAsText(file)\n  })\n)\n","// Checks if all the elements in a list have the\n// same node type\nexport const allOfType = (\n  (list, type, typeOf = (n) => n.nodeType) => (\n    Array.from(list)\n    .all(n => typeOf(n) === type)\n  )\n)\n\nexport const arraysEqual = (a, b) => {\n  if(a === b) return true\n  if(a == null || b == null) return false\n  if(a.length !== b.length) return false\n\n  for(let i = 0; i < a.length; ++i) {\n    if(a[i] !== b[i]) return false\n  }\n  return true\n}\n","// Creates a sharded object where each level\n// is a separate document.\nexport const toTree = (\n  async ({\n    obj, leafFor = async (n) => n,\n  }) => {\n    const out = {}\n    await Promise.all(\n      Object.entries(obj).map(\n        async ([key, val]) => {\n          if(Array.isArray(val)) {\n            out[key] = await Promise.all(\n              val.map(async (v) => (\n                await toTree({ obj: v, leafFor })\n              ))\n            )\n          } else if(typeof val === 'object') {\n            out[key] = await toTree({ obj: val, leafFor })\n          } else {\n            out[key] = val\n          }\n        }\n      )\n    )\n    return await leafFor(out)\n  }\n)\n\n// Depth-first search\nexport const dfs = ({\n  node, depth = 1, count = { current: 1 },\n  pre = (..._) => {},\n  step = (..._) => {},\n  nodeFor = ({ node, ..._ }) => node,\n  childrenOf = (node) => Array.from(node.childNodes),\n}) => {\n  // SQL nested set model, \"right\" is count on exit\n  const left = count.current\n  pre(node, depth, left)\n  const children = []\n  childrenOf(node).forEach(\n    (child) => {\n      count.current++\n      const result = dfs({\n        node: child,\n        pre, step, nodeFor,\n        childrenOf,\n        depth: depth + 1, count,\n      })\n      if(result) {\n        children.push(result)\n        step({\n          node, children,\n          depth, left, right: count.current,\n        })\n      }\n    }\n  )\n  return nodeFor({\n    node, children,\n    depth, left, right: count.current,\n  })\n}\n","import loadable from '@loadable/component'\nimport {\n  Flex, ListItem, UnorderedList, Text, Box,\n  Input,\n} from '@chakra-ui/react'\nimport React, { useEffect, useState } from 'react'\nimport {\n  nodeToJSON, buildDOM, ipfs,\n} from './util'\nimport { getDoc } from './utils/content'\nimport { dfs, toTree } from './utils/structures'\n\nconst ForcedGraph = loadable(() => import('./ForcedGraph'))\n//const DynGraph = loadable(() => import('./DynGraph'))\n\nconst isNum = (maybe) => (\n  /^(\\d+\\.?\\d*)|(\\d*\\.?\\d+)$/.test(maybe)\n)\n\nconst fixViewBox = (json) => {\n  // without this images won't fill the frame\n  if(json?.attributes?.xmlns === 'http://www.w3.org/2000/svg') {\n    const { width: w, height: h, viewBox: b } = (\n      json?.attributes\n    )\n    if(!b && isNum(w) && isNum(h)) {\n      json.attributes.viewBox = (\n        [0, 0, w, h].join(' ')\n      )\n    }\n    // ??= not supported by webpack\n    !w && (json.attributes.width = '100%')\n    !h && (json.attributes.height = '100%')\n  }\n}\n\nexport default () => {\n  const [content, setContent] = useState(null)\n  const docTransforms = [fixViewBox]\n  \n  useEffect(() => {}, [])\n  const onDOMStart = ({ child }) => {\n    console.info('Processing', child)\n  }\n  const load = async (evt) => {\n    const files = evt.target.files\n    const name = evt.target.value\n\n    if(files.length === 0) {\n      throw new Error('No file is selected')\n    }\n\n    const doc = await getDoc(files[0])\n    if(doc === null) {\n      setContent(<h1><code>null</code> Document</h1>)\n    } else if(typeof doc === 'string') {\n      // eslint-disable-next-line no-control-regex\n      if(/\\x00/.test(doc)) {\n        setContent(\n          <object data={`data:;base64,${btoa(doc)}`}>\n            <p>This was the binary object: {name}</p>\n          </object>\n        )\n      } else {\n        setContent(<pre>{doc}</pre>)\n      }\n    } else {\n      const json = dfs({\n        node: doc.documentElement,\n        nodeFor: nodeToJSON,\n      })\n      console.info('DFS', json)\n      try {\n        docTransforms.forEach(t => t(json))\n        const cid = await toTree({\n          obj: json,\n          leafFor: async (node) => (\n            await ipfs.dag.put(node)\n          ),\n        })\n        const root = (await ipfs.dag.get(cid)).value\n        console.info(\n          `CID for ${name}: ${cid.toString()}`\n        )\n        const dom = await buildDOM({\n          root, onDOMStart,\n        })\n        setContent(dom)\n      } catch(err) {\n        console.warn('Error Building', err)\n        setContent(\n          <>\n            <Text>Unable to create object.</Text>\n            <Text>Error: <q>{err.message}</q></Text>\n            <Text>If the error is with fetching, try the CORS solution above.</Text>\n          </>\n        )\n      }\n    }\n  }\n\n  const graph = {\n    nodes: [...new Array(5)].map(\n      (_, i) => ({ id: i + 1 })\n    ),\n    links: [\n      { source: 1, target: 3 },\n      { source: 3, target: 4 },\n      { source: 5, target: 3 },\n      { source: 5, target: 1 },\n    ]\n  }\n\n  return (\n    <Flex align=\"center\" direction=\"column\" mt={25}>\n      <Text>This program requires write access to an IPFS endpoint. If you want to use it from the web, you'll need to whitelist <code>dysbulic.github.io</code>.</Text>\n      <UnorderedList listStyleType=\"none\">\n        <ListItem _before={{ content: '\"$ \"' }}>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"http://localhost:3000\", \"http://localhost:5001\", \"https://webui.ipfs.io\", \"https://dysbulic.github.io\"]'</ListItem>\n        <ListItem _before={{ content: '\"$ \"' }}>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"POST\"]'</ListItem>\n      </UnorderedList>\n      <Input type=\"file\"\n        onChange={load}\n        minH=\"2em\" maxW={500} fontSize={30}/>\n      {content && (\n        <Box h=\"90vh\">\n          {content}\n        </Box>\n      )}\n      <ForcedGraph {...{ graph }}/>\n    </Flex>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}