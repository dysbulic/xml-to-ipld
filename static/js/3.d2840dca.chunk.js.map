{"version":3,"sources":["ForcedGraph.jsx"],"names":["color","d3","graph","svg","useRef","useState","chart","setChart","useEffect","domNode","attr","simulation","force","strength","id","d","distance","on","node","x","y","link","source","target","append","selectAll","Object","assign","update","nodes","links","old","Map","data","map","get","join","enter","alpha","restart","chartOn","current","h","ref"],"mappings":"sKAIMA,EAAQC,IAAgBA,KAyEf,sBAAgB,IAAbC,EAAY,EAAZA,MACVC,EAAMC,mBADgB,EAEFC,qBAFE,mBAErBC,EAFqB,KAEdC,EAFc,KAY5B,OARAC,qBAAU,WACRD,EAzEY,SAACE,GACf,IAAMN,EACJF,IAAUQ,GACTC,KAAK,UAAW,EAAC,KAAY,IANpB,IACC,MAMVA,KAAK,QAAS,QACdA,KAAK,SAAU,QAEZC,EACJV,MACCW,MAAM,SAAUX,MAAmBY,UAAU,MAC7CD,MAAM,OAAQX,MAAea,IAAG,SAAAC,GAAC,OAAIA,EAAED,MAAIE,SAAS,MACpDJ,MAAM,IAAKX,OACXW,MAAM,IAAKX,OACXgB,GAAG,QAeN,WACEC,EACCR,KAAK,MAAM,SAAAK,GAAC,OAAIA,EAAEI,KAClBT,KAAK,MAAM,SAAAK,GAAC,OAAIA,EAAEK,KAEnBC,EACCX,KAAK,MAAM,SAAAK,GAAC,OAAIA,EAAEO,OAAOH,KACzBT,KAAK,MAAM,SAAAK,GAAC,OAAIA,EAAEO,OAAOF,KACzBV,KAAK,MAAM,SAAAK,GAAC,OAAIA,EAAEQ,OAAOJ,KACzBT,KAAK,MAAM,SAAAK,GAAC,OAAIA,EAAEQ,OAAOH,QAtBxBC,EACFlB,EAAIqB,OAAO,KACVd,KAAK,SAAU,QACfA,KAAK,eAAgB,KACrBe,UAAU,QAETP,EACFf,EAAIqB,OAAO,KACVd,KAAK,SAAU,QACfA,KAAK,eAAgB,KACrBe,UAAU,UAeb,OAAOC,OAAOC,OAAOxB,EAAIe,OAAQ,CAC/BU,OAAQ,YAAuB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAGVC,EAAM,IAAIC,IAAId,EAAKe,OAAOC,KAAI,SAAAnB,GAAC,MAAI,CAACA,EAAED,GAAIC,OAChDc,EAAQA,EAAMK,KAAI,SAAAnB,GAAC,OAAIW,OAAOC,OAAOI,EAAII,IAAIpB,EAAED,KAAO,GAAIC,MAC1De,EAAQA,EAAMI,KAAI,SAAAnB,GAAC,OAAIW,OAAOC,OAAO,GAAIZ,MAEzCG,EACEA,EAAKe,KAAKJ,GAAO,SAAAd,GAAC,OAAIA,EAAED,MACvBsB,MAAK,SAACC,GAAD,OACJA,EAAMb,OAAO,UACZd,KAAK,IAAK,GACVA,KAAK,QAAQ,SAAAK,GAAC,OAAIf,EAAMe,EAAED,UAG/BO,EACEA,EAAKY,KAAKH,GAAO,SAAAf,GAAC,MAAI,CAACA,EAAEO,OAAQP,EAAEQ,WAClCa,KAAK,QAGRzB,EAAWkB,MAAMA,GACjBlB,EAAWC,MAAM,QAAQkB,MAAMA,GAC/BnB,EAAW2B,MAAM,GAAGC,aAUbC,CAAQrC,EAAIsC,YACpB,IAEHjC,qBAAU,WACRN,IAAK,OAAII,QAAJ,IAAIA,KAAOsB,OAAO1B,MACtB,CAACI,EAAOJ,IAGT,cAAC,IAAOC,IAAR,CAAYuC,EAAE,OAAOC,IAAKxC","file":"static/js/3.d2840dca.chunk.js","sourcesContent":["import * as d3 from 'd3'\nimport { useEffect, useRef, useState } from 'react'\nimport { Box, Button, chakra, Flex } from '@chakra-ui/react'\n\nconst color = d3.scaleOrdinal(d3.schemeTableau10)\n\nconst width = 640\nconst height = 480\n\nconst chartOn = (domNode) => {\n  const svg = (\n    d3.select(domNode)\n    .attr('viewBox', [-width / 2, -height / 2, width, height])\n    .attr('width', '100%')\n    .attr('height', '100%')\n  )\n  const simulation = (\n    d3.forceSimulation()\n    .force('charge', d3.forceManyBody().strength(-1000))\n    .force('link', d3.forceLink().id(d => d.id).distance(200))\n    .force('x', d3.forceX())\n    .force('y', d3.forceY())\n    .on('tick', ticked)\n  )\n  let link = (\n    svg.append('g')\n    .attr('stroke', '#000')\n    .attr('stroke-width', 1.5)\n    .selectAll('line')\n  )\n  let node = (\n    svg.append('g')\n    .attr('stroke', '#fff')\n    .attr('stroke-width', 1.5)\n    .selectAll('circle')\n  )\n\n  function ticked() {\n    node\n    .attr('cx', d => d.x)\n    .attr('cy', d => d.y)\n\n    link\n    .attr('x1', d => d.source.x)\n    .attr('y1', d => d.source.y)\n    .attr('x2', d => d.target.x)\n    .attr('y2', d => d.target.y)\n  }\n\n  return Object.assign(svg.node(), {\n    update: ({ nodes, links }) => {\n      // Make a shallow copy to protect against mutation, while\n      // recycling old nodes to preserve position and velocity.\n      const old = new Map(node.data().map(d => [d.id, d]))\n      nodes = nodes.map(d => Object.assign(old.get(d.id) || {}, d))\n      links = links.map(d => Object.assign({}, d))\n\n      node = (\n        node.data(nodes, d => d.id)\n        .join((enter) => (\n          enter.append('circle')\n          .attr('r', 8)\n          .attr('fill', d => color(d.id))\n        ))\n      )\n      link = (\n        link.data(links, d => [d.source, d.target])\n        .join('line')\n      )\n\n      simulation.nodes(nodes)\n      simulation.force('link').links(links)\n      simulation.alpha(1).restart()\n    }\n  })\n}\n\nexport default ({ graph }) => {\n  const svg = useRef()\n  const [chart, setChart] = useState()\n\n  useEffect(() => {\n    setChart(chartOn(svg.current))\n  }, [])\n\n  useEffect(() => {\n    graph && chart?.update(graph)\n  }, [chart, graph])\n\n  return (\n    <chakra.svg h=\"90vh\" ref={svg}/>\n  )\n}"],"sourceRoot":""}