{"version":3,"sources":["utils/dom.js","utils/content.js","utils/types.js","utils/structures.js","CBOR-DAG.jsx","Ceramic.jsx","Build.jsx","About.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["ipfs","ipfsClient","protocol","host","port","ceramic","Ceramic","camelCase","str","sep","split","map","part","i","toUpperCase","slice","join","nodeToJSON","node","children","depth","left","right","json","name","localName","type","nodeType","Node","ELEMENT_NODE","TEXT_NODE","ATTRIBUTE_NODE","CDATA_SECTION_NODE","ENTITY_REFERENCE_NODE","ENTITY_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","NOTATION_NODE","value","textContent","test","length","attributes","Object","fromEntries","attr","rule","val","trim","filter","e","some","t","keys","optDeref","a","CID","isCID","dag","get","startsWith","loadDocument","content","console","warn","cleanAttributes","attrs","entries","style","prop","class","className","buildDOM","root","key","onBuildStart","onBuildEnd","onDOMStart","onDOMFinish","onLeaf","Error","Promise","values","all","child","parent","dom","push","includes","error","elem","React","createElement","parsererrorNS","DOMParser","parseFromString","getElementsByTagName","namespaceURI","isParseError","doc","getElementsByTagNameNS","getDoc","file","resolve","reject","reader","FileReader","onload","event","parser","xml","target","result","toString","html","firstChild","b","arraysEqual","Array","from","childNodes","n","head","body","list","typeOf","allOfType","text","readAsText","toTree","obj","leafFor","out","isArray","v","dfs","count","current","pre","step","nodeFor","childrenOf","forEach","isNum","maybe","fixViewBox","xmlns","w","width","h","height","viewBox","useState","setContent","docTransforms","timer","setTimer","status","setStatus","startTime","setStartTime","endTime","useRef","counter","useCallback","time","performance","now","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","requestAnimationFrame","useEffect","load","evt","files","data","btoa","documentElement","put","cid","to","message","align","direction","mt","maxW","textAlign","textIndent","title","listStyleType","_before","onChange","minH","fontSize","createCeramic","url","didFor","addr","createDocument","metadata","family","controllers","toLowerCase","setCeramic","connecting","setConnecting","connect","threeIdConnect","ThreeIdConnect","window","ethereum","enable","addresses","authProvider","EthereumAuthProvider","getDidProvider","didProvider","setDIDProvider","commitId","toUrl","uri","encodeURIComponent","onClick","disabled","ForcedGraph","loadable","history","setDoc","nodes","links","graph","setGraph","paramRoot","useParams","queryRoot","URLSearchParams","useLocation","search","resolvedRoot","decodeURIComponent","formRoot","setFormRoot","setEndTime","total","setTotal","progress","setProgress","id","pid","source","p","rootObj","err","flexGrow","mr","as","onSubmit","path","autoFocus","placeholder","bg","color","ml","_placeholder","visibility","Link","RouterLink","Acronym","chakra","m","theme","extendTheme","config","initialColorMode","styles","global","textDecoration","basename","isOpen","isActive","Button","position","top","ChevronDown","Hamburger","exact","component","Build","About","CBOR","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.7fbdb8ea.chunk.js","sourcesContent":["import ipfsClient from 'ipfs-http-client'\nimport React from 'react'\nimport CID from 'cids'\nimport Ceramic from '@ceramicnetwork/http-client'\n\nlet ipfs = (\n  ipfsClient({ protocol: 'http', host: 'localhost', port: 5001 })\n)\n\nconst ceramic = (\n  new Ceramic('https://ceramic-clay.3boxlabs.com')\n)\n\nexport const camelCase = (str, sep = '-') => (\n  str.split(sep)\n  .map((part, i) => {\n    if(i === 0) {\n      return part\n    } else {\n      return part[0].toUpperCase() + part.slice(1)\n    }\n  })\n  .join('')\n)\n\nexport const nodeToJSON = ({\n  node, children, depth, left, right\n}) => {\n  const json = {\n    name: node.localName, children,\n    depth, left, right,\n  }\n  json.type = ((() => {\n    switch(node.nodeType) {\n    case Node.ELEMENT_NODE: return 'element'\n    case Node.TEXT_NODE: return 'text'\n    case Node.ATTRIBUTE_NODE: return 'attribute'\n    case Node.CDATA_SECTION_NODE: return 'cdata'\n    case Node.ENTITY_REFERENCE_NODE: return 'reference'\n    case Node.ENTITY_NODE: return 'entity'\n    case Node.PROCESSING_INSTRUCTION_NODE: return 'instruction'\n    case Node.COMMENT_NODE: return 'comment'\n    case Node.DOCUMENT_NODE: return 'document'\n    case Node.DOCUMENT_TYPE_NODE: return 'doctype'\n    case Node.DOCUMENT_FRAGMENT_NODE: return 'fragment'\n    case Node.NOTATION_NODE: return 'notation'\n    default: return 'unknown'\n    }\n  })())\n  if(json.type === 'text' || json.type === 'cdata') {\n    delete json.name\n    json.value = node.textContent\n    if(/^\\n\\s*$/.test(json.value)) {\n      return null // Don't save inter-element whitespace\n    }\n  }\n  if(children.length === 0) {\n    delete json.children\n  }\n  json.attributes = Object.fromEntries(\n    [...node.attributes ?? []].map((attr) => {\n      let value = attr.value\n      if(attr.name === 'style') {\n        value = Object.fromEntries(\n          attr.value.split(';').map(\n            (rule) => {\n              const [name, ...val] = rule.split(':')\n              return [camelCase(name.trim()), val.join().trim()]\n            }\n          )\n          .filter(e => e.some(t => /\\S/.test(t)))\n        )\n      }\n      return [attr.name, value]\n    })\n  )\n  if(Object.keys(json.attributes).length === 0) {\n    delete json.attributes\n  }\n  return json\n}\n\n// Dereference a CID if the node is one\nconst optDeref = async (node) => {\n  try {\n    if(CID.isCID(node)) {\n      return (await ipfs.dag.get(node)).value\n    } else if(\n      typeof node === 'string'\n      && node.startsWith('ceramic://')\n    ) {\n      return (\n        (await ceramic.loadDocument(node)).content\n      )\n    }\n    return node\n  } catch(err) {\n    console.warn('ERR', err)\n    ipfs = ipfsClient({ host: 'ipfs.io', port: 443 })\n    return await optDeref(node)\n  }\n}\n\nconst cleanAttributes = async (attributes) => {\n  attributes = await optDeref(attributes ?? {})\n\n  const attrs = {}\n  for(let [name, val] of Object.entries(attributes)) {\n    attrs[name] = await optDeref(val)\n  }\n\n  if(attrs.style) {\n    const style = {}\n    for(let [prop, val] of (\n      Object.entries(attrs.style)\n    )) {\n      style[camelCase(prop, '-')] = val\n    }\n    attrs.style = style\n  }\n\n  if(attrs.class) {\n    attrs.className = attrs.class\n    delete attrs.class\n  }\n  for(let attr of ['xml:space', 'xmlns:xlink', 'xlink:href']) {\n    if(attrs[attr]) {\n      attrs[camelCase(attr, ':')] = attrs[attr]\n      delete attrs[attr]\n    }\n  }\n  // ToDo: switch this to a blacklist & convert everything else\n  for(let attr of [\n    'flood-opacity', 'flood-color', 'stop-color',\n    'clip-rule', 'stroke-miterlimit', 'stroke-linejoin',\n    'stroke-linecap', 'stroke-width', 'clip-path',\n    'fill-rule', 'font-size', 'font-family',\n    'enable-background',\n  ]) {\n    if(attrs[attr]) {\n      attrs[camelCase(attr, '-')] = attrs[attr]\n      delete attrs[attr]\n    }\n  }\n\n  return attrs\n}\n\nexport const buildDOM = async ({\n  root, key = { val: 0 },\n  onBuildStart = null, onBuildEnd = null,\n  onDOMStart = null, onDOMFinish = null,\n  onLeaf = null,\n}) => {\n  root = await optDeref(root)\n  if(root.type !== 'element') {\n    throw new Error(`Root Type: ${root.type}`)\n  }\n  if(root.depth === 1 && root.left === 1) {\n    onBuildStart?.({ root })\n  }\n  root.children = await Promise.all(\n    Object.values(\n      await optDeref(root.children ?? [])\n    )\n    .map(optDeref)\n  )\n  const children = []\n  for(let child of root.children) {\n    if(child.type === 'element') {\n      onDOMStart?.({ parent: root, child })\n      child.children = await Promise.all(\n        Object.values(\n          await optDeref(child.children ?? [])\n        )\n        .map(optDeref)\n      )\n      const dom = await (\n        buildDOM({\n          root: child, key,\n          onBuildStart, onBuildEnd,\n          onDOMStart, onDOMFinish,\n          onLeaf,\n        })\n      )\n      onDOMFinish?.({ parent: root, child, node: dom })\n      children.push(dom)\n    } else if(['text', 'cdata'].includes(child.type)) {\n      onLeaf({ parent: root, child })\n      children.push(child.value)\n    } else if(child?.value?.trim() !== '') {\n      console.error('Child', child)\n    }\n  }\n  const attrs = await cleanAttributes(root.attributes)\n  attrs.key = ++key.val\n  const elem = React.createElement(\n    root.name, attrs, children.length > 0 ? children : null\n  )\n  if(root.depth === 1 && root.left === 1) {\n    onBuildEnd?.(root, elem)\n  }\n  return elem\n}\n","import { arraysEqual, allOfType } from './types'\n\nexport const parsererrorNS = (() => (\n  (new DOMParser())\n  .parseFromString('INVALID', 'application/xml')\n  .getElementsByTagName('parsererror')[0]\n  .namespaceURI\n))()\n\nexport const isParseError = (doc) => (\n  doc.getElementsByTagNameNS(\n    parsererrorNS, 'parsererror'\n  ).length > 0\n)\n\n// Return the contents of a file returned from\n// a form input. It first tries as XML. If that\n// succeeds, the DOM is returned. Next HTML is\n// tried. Most files (txt, png, m4a, etc.) are\n// inserted into a simple HTML document. HTML\n// produces a DOM which is returned.\nexport const getDoc = (file) => (\n  new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onload = (event) => {\n      const parser = new DOMParser()\n      const xml = parser.parseFromString(\n        event.target.result.toString(), 'application/xml'\n      )\n      if(!isParseError(xml)) {\n        return resolve(xml)\n      }\n      const html = parser.parseFromString(\n        event.target.result.toString(), 'text/html'\n      )\n      if(isParseError(html)) {\n        return resolve(null)\n      }\n      // Browsers will wrap the contents of any\n      // file in a <html><head/><body>…</body></html>\n      // structure.\n      if(\n        html.firstChild.localName === 'html'\n        && arraysEqual(\n          Array.from(html.firstChild.childNodes)\n          .map(n => n.localName),\n          ['head', 'body'],\n        )\n      ) {\n        const head = html.firstChild.firstChild\n        const body = html.firstChild.childNodes[1]\n        if(\n          head.childNodes.length === 0\n          && allOfType(\n            body.childNodes, Node.TEXT_NODE\n          )\n        ) {\n          const text = (\n            Array.from(body.childNodes)\n            .map(n => n.textContent)\n            .join()\n          )\n          return resolve(text)\n        }\n        return resolve(html)\n      }\n    }\n    reader.readAsText(file)\n  })\n)\n","// Checks if all the elements in a list have the\n// same node type\nexport const allOfType = (\n  (list, type, typeOf = (n) => n.nodeType) => (\n    Array.from(list)\n    .all(n => typeOf(n) === type)\n  )\n)\n\nexport const arraysEqual = (a, b) => {\n  if(a === b) return true\n  if(a == null || b == null) return false\n  if(a.length !== b.length) return false\n\n  for(let i = 0; i < a.length; ++i) {\n    if(a[i] !== b[i]) return false\n  }\n  return true\n}\n","// Creates a sharded object where each level\n// is a separate document.\nexport const toTree = (\n  async ({\n    obj, leafFor = async (n) => n,\n  }) => {\n    const out = {}\n    await Promise.all(\n      Object.entries(obj).map(\n        async ([key, val]) => {\n          if(Array.isArray(val)) {\n            out[key] = await Promise.all(\n              val.map(async (v) => (\n                await toTree({ obj: v, leafFor })\n              ))\n            )\n          } else if(typeof val === 'object') {\n            out[key] = await toTree({ obj: val, leafFor })\n          } else {\n            out[key] = val\n          }\n        }\n      )\n    )\n    return await leafFor(out)\n  }\n)\n\n// Depth-first search\nexport const dfs = ({\n  node, depth = 1, count = { current: 1 },\n  pre = (..._) => {},\n  step = (..._) => {},\n  nodeFor = ({ node, ..._ }) => node,\n  childrenOf = (node) => Array.from(node.childNodes),\n}) => {\n  // SQL nested set model, \"right\" is count on exit\n  const left = count.current\n  pre(node, depth, left)\n  const children = []\n  childrenOf(node).forEach(\n    (child) => {\n      count.current++\n      const result = dfs({\n        node: child,\n        pre, step, nodeFor,\n        childrenOf,\n        depth: depth + 1, count,\n      })\n      if(result) {\n        children.push(result)\n        step({\n          node, children,\n          depth, left, right: count.current,\n        })\n      }\n    }\n  )\n  return nodeFor({\n    node, children,\n    depth, left, right: count.current,\n  })\n}\n","import {\n  Flex, ListItem, UnorderedList, Text, Input,\n} from '@chakra-ui/react'\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport ipfsClient from 'ipfs-http-client'\nimport { Link } from 'react-router-dom'\nimport { nodeToJSON } from './utils/dom'\nimport { getDoc } from './utils/content'\nimport { dfs, toTree } from './utils/structures'\n\nexport const ipfs = (\n  ipfsClient({ protocol: 'http', host: 'localhost', port: 5001 })\n)\n\nconst isNum = (maybe) => (\n  /^(\\d+\\.?\\d*)|(\\d*\\.?\\d+)$/.test(maybe)\n)\n\nconst fixViewBox = (json) => {\n  // without this images won't fill the frame\n  if(\n    json?.attributes?.xmlns\n    === 'http://www.w3.org/2000/svg'\n  ) {\n    const { width: w, height: h, viewBox: b } = (\n      json?.attributes\n    )\n    if(!b && isNum(w) && isNum(h)) {\n      json.attributes.viewBox = (\n        [0, 0, w, h].join(' ')\n      )\n    }\n    // ??= not supported by webpack\n    !w && (json.attributes.width = '100%')\n    !h && (json.attributes.height = '100%')\n  }\n}\n\nexport default () => {\n  const [content, setContent] = useState(null)\n  const docTransforms = [fixViewBox]\n  const [timer, setTimer] = useState(null)\n  const [status, setStatus] = useState(null)\n  const [startTime, setStartTime] = useState()\n  const endTime = useRef()\n\n  const counter = useCallback(() => {\n    if(startTime && !endTime.current) {\n      const δ = performance.now() - startTime\n      const time = δ.toLocaleString(\n        undefined,\n        { minimumFractionDigits: 2, maximumFractionDigits: 2 },\n      )\n      setTimer(`${time}ms`)\n      requestAnimationFrame(counter)\n    }\n  }, [startTime])\n  useEffect(() => { counter() }, [counter])\n\n  const load = async (evt) => {\n    setStartTime(performance.now())\n    endTime.current = null\n\n    const files = evt.target.files\n    const name = evt.target.value\n\n    if(files.length === 0) {\n      throw new Error('No file is selected')\n    }\n\n    const doc = await getDoc(files[0])\n    if(doc === null) {\n      setContent(<h1><code>null</code> Document</h1>)\n    } else if(typeof doc === 'string') {\n      // eslint-disable-next-line no-control-regex\n      if(/\\x00/.test(doc)) {\n        setContent(\n          <object data={`data:;base64,${btoa(doc)}`}>\n            <p>This was the binary object: {name}</p>\n          </object>\n        )\n      } else {\n        setContent(<pre>{doc}</pre>)\n      }\n    } else {\n      const json = dfs({\n        node: doc.documentElement,\n        nodeFor: nodeToJSON,\n      })\n      try {\n        docTransforms.forEach(t => t(json))\n        const cid = await toTree({\n          obj: json,\n          leafFor: async (node) => (\n            await ipfs.dag.put(node)\n          ),\n        })\n        setStatus(\n          <Text>CID for {name}: <Link to  ={`/build/${cid}`}>{cid.toString()}</Link></Text>\n        )\n      } catch(err) {\n        console.warn('Error Building', err)\n        setContent(\n          <>\n            <Text>Unable to create object.</Text>\n            <Text>Error: <q>{err.message}</q></Text>\n            <Text>If the error is with fetching, try the CORS solution above.</Text>\n          </>\n        )\n      }\n    }\n    endTime.current = performance.now()\n  }\n\n  return (\n    <Flex align=\"center\" direction=\"column\" mt={25}>\n      <Flex direction=\"column\" maxW=\"35rem\" textAlign=\"justify\" style={{ textIndent: 20 }}>\n        <Text>Application to serialize a DOM tree to IPLD as a <acronym title=\"Common Binary Object Representation\">CBOR</acronym>-<acronym title=\"Directed Acylic Graph\">DAG</acronym> where each node is a separate document.</Text>\n        <Text>This program requires write access to an IPFS API endpoint. If you want to use it from the web, you'll need to be running a node locally &amp; whitelist <code>dysbulic.github.io</code>.</Text>\n        <UnorderedList listStyleType=\"none\" style={{ textIndent: -25 }}>\n          <ListItem _before={{ content: '\"$ \"' }}>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"webui://-\", \"http://localhost:3000\", \"http://127.0.0.1:5001\", \"https://webui.ipfs.io\", \"https://dysbulic.github.io\"]'</ListItem>\n          <ListItem _before={{ content: '\"$ \"' }}>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"POST\"]'</ListItem>\n        </UnorderedList>\n      </Flex>\n      <Input type=\"file\"\n        onChange={load}\n        minH=\"1.8em\" maxW={600} mt={6}\n        fontSize={30}\n      />\n      {timer}\n      {status}\n      {content}\n    </Flex>\n  )\n}","import {\n  Flex, Text, Input, Button, Spinner,\n} from '@chakra-ui/react'\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport {\n  ThreeIdConnect, EthereumAuthProvider\n} from '3id-connect'\nimport { nodeToJSON } from './utils/dom'\nimport { getDoc } from './utils/content'\nimport { dfs, toTree } from './utils/structures'\nimport { Link } from 'react-router-dom'\n//import DocID from './docID.json'\n\nconst createCeramic = (\n  url = 'https://ceramic-clay.3boxlabs.com',\n) => {\n  const ceramic = new Ceramic(url)\n  ceramic.didFor = async (addr) => (\n    (await ceramic.createDocument('caip10-link',\n      { metadata: {\n        family: 'caip10-link',\n        controllers: [`${addr.toLowerCase()}@eip155:1`],\n      } }\n    )).content\n  )\n  return ceramic\n}\n\nexport default () => {\n  const [content, setContent] = useState(null)\n  const [status, setStatus] = useState(null)\n  const [ceramic, setCeramic] = useState()\n  const [connecting, setConnecting] = useState(false)\n  const [timer, setTimer] = useState(null)\n  const [startTime, setStartTime] = useState()\n  const endTime = useRef()\n\n  const counter = useCallback(() => {\n    if(startTime && !endTime.current) {\n      const δ = performance.now() - startTime\n      const time = δ.toLocaleString(\n        undefined,\n        { minimumFractionDigits: 2, maximumFractionDigits: 2 },\n      )\n      setTimer(`${time}ms`)\n      requestAnimationFrame(counter)\n    }\n  }, [startTime])\n  useEffect(() => { counter() }, [counter])\n\n  const connect = async () => {\n    setConnecting(true)\n    const threeIdConnect = new ThreeIdConnect()\n    const addresses = await window.ethereum.enable()\n    const authProvider = (\n      new EthereumAuthProvider(\n        window.ethereum, addresses[0]\n      )\n    )\n    await threeIdConnect.connect(authProvider)\n    const didProvider = await (\n      threeIdConnect.getDidProvider()\n    )\n    const ceramic = createCeramic()\n    await ceramic.setDIDProvider(didProvider)\n    setCeramic(ceramic)\n  }\n\n  const load = async (evt) => {\n    setContent(null)\n    setStartTime(performance.now())\n    endTime.current = null\n\n    const files = evt.target.files\n    const name = evt.target.value\n\n    if(files.length === 0) {\n      throw new Error('No file is selected')\n    }\n\n    const doc = await getDoc(files[0])\n    if(doc === null) {\n      setContent(<h1><code>null</code> Document</h1>)\n    } else if(typeof doc === 'string') {\n      // eslint-disable-next-line no-control-regex\n      if(/\\x00/.test(doc)) {\n        setContent(\n          <object data={`data:;base64,${btoa(doc)}`}>\n            <p>This was the binary object: {name}</p>\n          </object>\n        )\n      } else {\n        setContent(<pre>{doc}</pre>)\n      }\n    } else {\n      const json = dfs({\n        node: doc.documentElement,\n        nodeFor: nodeToJSON,\n      })\n      try {\n        const uri = await toTree({\n          obj: json,\n          leafFor: async (node) => (\n            (\n              await ceramic.createDocument(\n                'tile',\n                {\n                  // Styles are sharded as well\n                  // metadata: {\n                  //   schema: DocID.schemas.dom\n                  // },\n                  content: node,\n                }\n              )\n            )\n            .commitId\n            .toUrl()\n          ),\n        })\n        setStatus(\n          <Text>URI for {name}: <Link to={`/build/${encodeURIComponent(uri)}`}>{uri}</Link></Text>\n        )\n      } catch(err) {\n        console.warn('Error Building', err)\n        setContent(\n          <>\n            <Text>Unable to create object.</Text>\n            <Text>Error: <q>{err.message}</q></Text>\n          </>\n        )\n      }\n    }\n    endTime.current = performance.now()\n  }\n\n  return (\n    <Flex align=\"center\" direction=\"column\" mt={25}>\n      <Text>This program serializes the DOM to the Ceramic Network with each node in a separate document.</Text>\n      {!ceramic ? (\n        <Button\n          mt={7}\n          onClick={connect}\n          disabled={connecting}\n        >\n          {connecting ? (\n            <Spinner/>\n          ) : (\n            'Connect Your Wallet'\n          )}\n        </Button>\n      ) : (\n        <>\n          <Input type=\"file\"\n            onChange={load}\n            minH=\"1.8em\" maxW={600} mt={6}\n            fontSize={30}\n          />\n          {timer}\n          {status}\n          {content}\n        </>\n      )}\n    </Flex>\n  )\n}","import {\n  Flex, Input, Text, Box, Progress,\n} from '@chakra-ui/react'\nimport loadable from '@loadable/component'\nimport CID from 'cids'\nimport React, {\n  useEffect, useState, useCallback,\n} from 'react'\nimport { useParams } from 'react-router'\nimport { useLocation } from 'react-router-dom'\nimport { buildDOM } from './utils/dom'\n\nconst ForcedGraph = (\n  loadable(() => import('./ForcedGraph'))\n)\n\nconst useQuery = () => (\n  new URLSearchParams(useLocation().search)\n)\n\nexport default ({ history }) => {\n  const [doc, setDoc] = useState(null)\n  const [graph, setGraph] = (\n    useState({ nodes: [], links: []})\n  )\n  const { root: paramRoot } = useParams()\n  const queryRoot = useQuery().get('root')\n  const resolvedRoot = paramRoot ?? queryRoot\n  const root = resolvedRoot && decodeURIComponent(\n    resolvedRoot\n  )\n  const [formRoot, setFormRoot] = useState('')\n  const [startTime, setStartTime] = useState(0)\n  const [endTime, setEndTime] = useState(0)\n  const [total, setTotal] = useState(1)\n  const [progress, setProgress] = useState(1)\n\n  const onBuildStart = ({ root }) => {\n    const id = `${root.left}:${root.right}`\n    const nodes = [{ id }]\n    const links = []\n    setTotal(root.right / 2)\n    setProgress(1)\n    setDoc(null)\n    setGraph({ nodes, links })\n    setStartTime(performance.now())\n    setEndTime(null)\n  }\n  const onDOMStart = ({ parent, child }) => {\n    const pid = `${parent.left}:${parent.right}`\n    const cid = `${child.left}:${child.right}`\n    setGraph(({ nodes = [], links = [] }) => ({\n      nodes: [\n        ...nodes,\n        { id: cid },\n      ],\n      links: [\n        ...links,\n        { source: pid, target: cid },\n      ],\n    }))\n    setProgress(p => p + 1)\n  }\n  const onBuildEnd = () => {\n    // total === 1 w/o wrapping\n    setTotal(t => {\n      setProgress(t)\n      return t\n    })\n    setEndTime(performance.now())\n  }\n  const onSubmit = () => {\n    const path = (\n      `/build/${encodeURIComponent(formRoot)}`\n    )\n    history.push(path)\n  }\n\n  const load = useCallback(\n    async () => {\n      try {\n        let rootObj\n        try {\n          rootObj = new CID(root)\n        } catch(err) {}\n        if(root.startsWith('ceramic://')) {\n          rootObj = root\n        } else if(root && !rootObj) {\n          console.warn('Unknown Root', root)\n        }\n        if(rootObj) {\n          setDoc(await buildDOM({\n            root: rootObj,\n            onBuildStart, onDOMStart,\n            onLeaf: onDOMStart,\n            onBuildEnd,\n          }))\n        }\n      } catch(err) {\n        console.error('Load Error', err)\n      }\n    }, [root]\n  )\n  useEffect(() => { load() }, [load])\n\n  const time = (\n    (endTime ?? performance.now()) - (startTime ?? 0)\n  )\n\n  return (\n    <Flex direction=\"column\" align=\"center\">\n      {root ? (\n        <>\n          <Text>\n            Loading: {root}\n            <span> </span>\n            ({time.toLocaleString()}ms)\n          </Text>\n          <Progress\n            w=\"75%\"\n            value={(progress / total) * 100}\n          />\n          <Flex w=\"100%\" h=\"90vh\">\n            <ForcedGraph\n              {...{ graph }}\n              flexGrow={1} mr={100}\n            />\n            {doc}\n          </Flex>\n        </>\n      ) : (\n        <Box\n          as=\"form\"\n          id=\"cid\"\n          w=\"100%\"\n          {...{ onSubmit }}\n        >\n          <Input\n            value={formRoot ?? ''}\n            onChange={\n              (evt) => setFormRoot(evt.target.value)\n            }\n            autoFocus\n            placeholder=\"IPFS Content ID or Ceramic URI\"\n            bg=\"white\"\n            color=\"black\"\n            ml={20} mt={6}\n            maxW=\"93%\"\n            _placeholder={{ color: '#333' }}\n          />\n          <Input type=\"submit\" visibility=\"hidden\"/>\n        </Box>\n      )}\n    </Flex>\n  )\n}","import {\n  Flex, Heading, ListItem, Text, UnorderedList,\n  Link as ChakraLink, chakra,\n} from '@chakra-ui/react'\nimport React from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\n\nconst Link = ({ children, to }) => (\n  <ChakraLink\n    as={RouterLink}\n    {...{ to }}\n  >{children}</ChakraLink>\n)\n\nconst Acronym = chakra('acronym')\n\nexport default () => (\n  <Flex\n    maxW=\"50rem\" m=\"auto\" fontSize={20} direction=\"column\" align=\"center\"\n  >\n    <Heading m={10}>XML to IPLD Converter</Heading>\n    <Text style={{ textIndent: 25, textAlign: 'justify' }}>This program takes an XML document, converts it into an <Acronym title=\"Interplanetary Filesystem\">IPFS</Acronym> <Acronym title=\"Directed Acyclic Graph\">DAG</Acronym> representing the <Acronym title=\"Document Object Model\">DOM</Acronym> where each node is a separate document linked to the others by <Acronym title=\"Content Identifier\">CID</Acronym>s. The program then walks the <Acronym title=\"Common Binary Object Representation\">CBOR</Acronym> structure and rebuilds the DOM tree.</Text>\n    <Text style={{ textIndent: 25, textAlign: 'justify' }} mt={5}>This method of storage has some interesting properties having to do with reusing unchanged subgraphs &amp; minimizing document size. The question was how long will it take to load, thus this program.</Text>\n    <Flex w=\"100%\" align=\"flex-start\" direction=\"column\">\n      <Text mt={5}>Examples:</Text>\n      <UnorderedList>\n        <ListItem><Link to=\"/cid/bafyreiadbcuiiwmdhzca2ajxwjgguwjyidujex2ptfu77rpidyt65lsm5e\">Gazoo</Link> <i>(~20 nodes)</i></ListItem>\n        <ListItem><Link to=\"/cid/bafyreibu2ase2fvphe47yjfiebtvvx236f4pbgqzgraayyd2bfszekldzi\">MetaGame Flag</Link> <i>(~30 nodes)</i></ListItem>\n        <ListItem><Link to=\"/cid/bafyreif645kruyhewydqwyjpor6z24mu3dzj2jsi6f2w57xoxcmnlf4ypa\">Linux Fox</Link> <i>(~150 nodes)</i></ListItem>\n        <ListItem><Link to=\"/cid/bafyreihqodbfy47utwfqyxnmsxpxgs5p3g5opcqnilor6flt3lwhksxrsu\">Chakras</Link> <i>(1000+ nodes)</i></ListItem>\n      </UnorderedList>\n    </Flex>\n  </Flex>\n)","import React from 'react'\nimport {\n  HashRouter as Router, Switch, Route,\n  Link as RouterLink,\n} from 'react-router-dom'\nimport {\n  ChakraProvider, extendTheme, Menu, MenuItem,\n  MenuButton, Button, MenuList, Link as ChakraLink,\n  chakra,\n} from '@chakra-ui/react'\nimport {\n  ChevronDownIcon, HamburgerIcon\n} from '@chakra-ui/icons'\nimport CBOR from './CBOR-DAG'\nimport Ceramic from './Ceramic'\nimport Build from './Build'\nimport About from './About'\n\nconst overrides = {\n  config: {\n    initialColorMode: 'dark',\n  },\n  styles: {\n    global: {\n      body: {\n        minH: '100vh',\n      },\n      a: {\n        textDecoration: 'underline',\n      },\n    },\n  },\n}\nconst theme = extendTheme(overrides)\n\nconst Acronym = chakra('acronym')\nconst Link = ({ children, to }) => (\n  <ChakraLink\n    as={RouterLink}\n    {...{ to }}\n    w='100%'\n  >{children}</ChakraLink>\n)\n\nexport default () => (\n  <ChakraProvider theme={theme}>\n    <Router basename='/'>\n      <Menu>\n        {({ isOpen }) => (\n          <>\n            <MenuButton\n              isActive={isOpen} as={Button}\n              position='fixed' top='1rem' left='1rem'\n            >\n              {isOpen ? <ChevronDownIcon/> : <HamburgerIcon/>}\n            </MenuButton>\n            <MenuList>\n            <MenuItem>\n                <Link to='/'>🏡 Store as CBOR-DAG</Link>\n              </MenuItem>\n              <MenuItem>\n                <Link to='/ceramic'>🎡 Store as Ceramic</Link>\n              </MenuItem>\n              <MenuItem>\n                <Link to='/build'>✍ Build from DAG</Link>\n              </MenuItem>\n              <MenuItem>\n                <Link to='/about'>📰 About</Link>\n              </MenuItem>\n            </MenuList>\n          </>\n        )}\n      </Menu>\n      <Switch>\n      <Route\n        path='/build/:root?'\n        exact={false}\n        component={Build}\n      />\n      <Route path='/about' component={About}/>\n      <Route path='/ceramic' component={Ceramic}/>\n      <Route\n        path='/'\n        exact={false}\n        component={CBOR}\n      />\n      </Switch>\n    </Router>\n  </ChakraProvider>\n)","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ChakraProvider } from '@chakra-ui/react'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}