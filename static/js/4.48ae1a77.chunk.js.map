{"version":3,"sources":["ForcedGraph.jsx"],"names":["color","d3","graph","props","useState","updating","setUpdating","svg","useRef","chart","setChart","useEffect","domNode","attr","simulation","force","strength","id","d","distance","on","node","x","y","link","source","target","append","selectAll","rezoom","bounds","getBBox","width","height","text","Object","assign","update","nodes","links","old","Map","data","map","get","join","enter","name","select","this","parentNode","transform","g","from","zoom","e","style","Math","sqrt","k","call","event","alpha","restart","chartOn","current","ref","onMouseDown","onMouseUp"],"mappings":"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","file":"static/js/4.48ae1a77.chunk.js","sourcesContent":["import * as d3 from 'd3'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { chakra } from '@chakra-ui/react'\n\nconst color = d3.scaleOrdinal(d3.schemeTableau10)\n\nconst width = 640\nconst height = 480\n\nconst chartOn = (domNode) => {\n  const svg = (\n    d3.select(domNode)\n    .attr('viewBox', [-width / 2, -height / 2, width, height])\n    .attr('width', '100%')\n    .attr('height', '100%')\n  )\n  const simulation = (\n    d3.forceSimulation()\n    .force('charge', d3.forceManyBody().strength(-1000))\n    .force('link', d3.forceLink().id(d => d.id).distance(200))\n    .force('x', d3.forceX())\n    .force('y', d3.forceY())\n    .on('tick', ticked)\n  )\n  let link = (\n    svg.append('g')\n    .attr('stroke', '#FFF')\n    .attr('stroke-width', 1.5)\n    .selectAll('line')\n  )\n  let node = (\n    svg.append('g')\n    .attr('stroke', '#FFF')\n    .attr('stroke-width', 1.5)\n    .selectAll('circle')\n  )\n\n  function ticked() {\n    node\n    .attr('cx', d => d.x)\n    .attr('cy', d => d.y)\n\n    link\n    .attr('x1', d => d.source.x)\n    .attr('y1', d => d.source.y)\n    .attr('x2', d => d.target.x)\n    .attr('y2', d => d.target.y)\n  }\n\n  const rezoom = () => {\n    const bounds = svg.node().getBBox()\n    const { x, y, width, height } = bounds\n    svg.attr('viewBox', [x, y, width, height])\n  }\n\n  const update = ({ nodes, links }) => {\n    // Make a shallow copy to protect against mutation, while\n    // recycling old nodes to preserve position and velocity.\n    //console.info({ nodes, links })\n    const old = new Map(node.data().map(d => [d.id, d]))\n    nodes = nodes.map(d => Object.assign(old.get(d.id) || {}, d))\n    links = links.map(d => Object.assign({}, d))\n\n    node = (\n      node.data(nodes, d => d.id)\n      .join((enter) => (\n        enter.append('circle')\n        .attr('r', 8)\n        .attr('fill', d => color(d.id))\n        .append('title')\n        .text(d => `${d.name} (${d.id})`)\n        .select(function () { return this.parentNode })\n      ))\n    )\n    link = (\n      link.data(links, d => [d.source, d.target])\n      .join('line')\n    )\n\n    // x and y are scales that project the data space to the ‘unzoomed’ pixel referential\n    const x = d3.scaleLinear([0, 1], [0, width])\n    const y = d3.scaleLinear([0, 1], [0, height])\n  \n    const delaunay = d3.Delaunay.from(nodes, d => x(d[0]), d => y(d[1]))\n\n    const g = svg.append('g');\n\n    let transform;\n\n    const zoom = d3.zoom().on('zoom', (e) => {\n      g.attr('transform', (transform = e.transform))\n      g.style('stroke-width', 3 / Math.sqrt(transform.k));\n      //nodes.attr('r', 3 / Math.sqrt(transform.k))\n    })\n    \n    const zoomable = (\n      svg\n      .call(zoom)\n      .call(zoom.transform, d3.zoomIdentity)\n      .on('pointermove', (event) => {\n        // const p = transform.invert(d3.pointer(event))\n        // const i = delaunay.find(...p)\n        // nodes.classed('highlighted', (_, j) => i === j)\n        // d3.select(nodes.nodes()[i]).raise()\n      })\n      .node()\n    )\n\n\n    simulation.nodes(nodes)\n    simulation.force('link').links(links)\n    simulation.alpha(1).restart()\n\n    rezoom()\n  }\n\n  svg.append('defs')\n  .append('style')\n  .text(`circle:hover { stroke: orangered; fill: orangered; }`)\n  \n  return Object.assign(svg.node(), { update, rezoom })\n}\n\nexport default ({\n  graph, ...props\n}) => {\n  const [updating, setUpdating] = useState(true)\n  const svg = useRef()\n  const [chart, setChart] = useState()\n\n  useEffect(() => {\n    setChart(chartOn(svg.current))\n  }, [])\n\n  useEffect(() => {\n    graph && updating && chart?.update(graph)\n  }, [chart, graph])\n\n  return (\n    <chakra.svg\n      {...props}\n      ref={svg}\n      onMouseDown={() => setUpdating(false) }\n      onMouseUp={() => setUpdating(true) }\n    />\n  )\n}"],"sourceRoot":""}