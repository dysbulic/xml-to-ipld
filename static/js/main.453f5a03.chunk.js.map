{"version":3,"sources":["util.js","App.jsx","reportWebVitals.js","index.js"],"names":["ipfs","ipfsClient","port","toDocTree","obj","a","out","Promise","all","Object","entries","map","key","val","dag","put","parsererrorNS","DOMParser","parseFromString","getElementsByTagName","namespaceURI","isParseError","doc","getElementsByTagNameNS","length","getDoc","file","resolve","reject","reader","FileReader","onload","event","parser","xml","target","result","html","b","i","arraysEqual","Array","from","firstChild","childNodes","n","localName","head","body","list","type","nodeType","allOfType","Node","TEXT_NODE","text","textContent","join","readAsText","domDFS","node","func","depth","count","left","child","filter","camelCase","str","sep","split","part","toUpperCase","slice","nodeToJSON","children","right","json","name","ELEMENT_NODE","ATTRIBUTE_NODE","CDATA_SECTION_NODE","ENTITY_REFERENCE_NODE","ENTITY_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","NOTATION_NODE","value","test","attributes","fromEntries","attr","rule","trim","e","some","t","keys","optDeref","CID","isCID","get","cleanAttributes","attrs","style","prop","class","className","buildDOM","root","Error","values","childChildren","sub","includes","push","c","React","createElement","console","error","Counter","loadable","useState","content","setContent","load","evt","files","warn","data","btoa","documentElement","cid","info","toString","dom","message","listStyleType","_before","align","direction","mt","input","onChange","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.453f5a03.chunk.js","sourcesContent":["import ipfsClient from 'ipfs-http-client'\nimport React from 'react'\nimport CID from 'cids'\n\nexport const ipfs = ipfsClient({ port: 5001 })\n\nexport const toIPLD = async (obj) => {\n  return await ipfs.dag.put(obj)\n}\n\n// Creates a sharded object where each level\n// is a separate document.\nexport const toDocTree = async (obj) => {\n  const out = {}\n  await Promise.all(\n    Object.entries(obj).map(\n      async ([key, val]) => {\n        if(typeof val === 'object') {\n          out[key] = await toDocTree(val)\n        } else {\n          out[key] = val\n        }\n      }\n    )\n  )\n  return await ipfs.dag.put(out)\n}\n\nexport const arraysEqual = (a, b) => {\n  if(a === b) return true\n  if(a == null || b == null) return false\n  if(a.length !== b.length) return false\n\n  for(let i = 0; i < a.length; ++i) {\n    if(a[i] !== b[i]) return false\n  }\n  return true\n}\n\nexport const parsererrorNS = (() => (\n  (new DOMParser())\n  .parseFromString('INVALID', 'application/xml')\n  .getElementsByTagName('parsererror')[0]\n  .namespaceURI\n))()\n\nexport const isParseError = (doc) => (\n  doc.getElementsByTagNameNS(\n    parsererrorNS, 'parsererror'\n  ).length > 0\n)\n\n// Checks if all the elements in a list have the\n// same node type\nexport const allOfType = (list, type) => (\n  Array.from(list)\n  .all(n => n.nodeType === type)\n)\n\n// Return the contents of a file returned from\n// a form input. It first tries as XML. If that\n// succeeds, the DOM is returned. Next HTML is\n// tried. Most files (txt, png, m4a, etc.) are\n// inserted into a simple HTML document. HTML\n// produces a DOM which is returned.\nexport const getDoc = (file) => (\n  new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onload = (event) => {\n      const parser = new DOMParser()\n      const xml = parser.parseFromString(\n        event.target.result, 'application/xml'\n      )\n      if(!isParseError(xml)) {\n        return resolve(xml)\n      }\n      const html = parser.parseFromString(\n        event.target.result, 'text/html'\n      )\n      if(isParseError(html)) {\n        return resolve(null)\n      }\n      if(\n        arraysEqual(\n          Array.from(html.firstChild.childNodes)\n          .map(n => n.localName),\n          ['head', 'body'],\n        )\n      ) {\n        const head = html.firstChild.firstChild\n        const body = html.firstChild.childNodes[1]\n        if(\n          head.childNodes.length === 0\n          && allOfType(\n            body.childNodes, Node.TEXT_NODE\n          )\n        ) {\n          const text = (\n            Array.from(body.childNodes)\n            .map(n => n.textContent)\n            .join()\n          )\n          return resolve(text)\n        }\n        return resolve(html)\n      }\n    }\n    reader.readAsText(file)\n  })\n)\n\nexport const domDFS = (node, func, depth = 1, count = 1) => {\n  // SQL nested set model, \"right\" is count on exit\n  const left = count\n  const result = (\n    Array.from(node.childNodes)\n    .map(child => domDFS(child, func, depth + 1, ++count))\n    .filter(n => !!n)\n  )\n  return func(node, result, depth, left, count)\n}\n\nexport const camelCase = (str, sep = '-') => (\n  str.split(sep)\n  .map((part, i) => {\n    if(i === 0) {\n      return part\n    } else {\n      return part[0].toUpperCase() + part.slice(1)\n    }\n  })\n  .join('')\n)\n\nexport const nodeToJSON = (node, children, depth, left, right) => {\n  const json = {\n    name: node.localName, children,\n  }\n  json.type = ((() => {\n    switch(node.nodeType) {\n    case Node.ELEMENT_NODE: return 'element'\n    case Node.TEXT_NODE: return 'text'\n    case Node.ATTRIBUTE_NODE: return 'attribute'\n    case Node.CDATA_SECTION_NODE: return 'cdata'\n    case Node.ENTITY_REFERENCE_NODE: return 'reference'\n    case Node.ENTITY_NODE: return 'entity'\n    case Node.PROCESSING_INSTRUCTION_NODE: return 'instruction'\n    case Node.COMMENT_NODE: return 'comment'\n    case Node.DOCUMENT_NODE: return 'document'\n    case Node.DOCUMENT_TYPE_NODE: return 'doctype'\n    case Node.DOCUMENT_FRAGMENT_NODE: return 'fragment'\n    case Node.NOTATION_NODE: return 'notation'\n    default: return 'unknown'\n    }\n  })())\n  if(json.type === 'text' || json.type === 'cdata') {\n    delete json.name\n    json.value = node.textContent\n    if(/^\\n\\s*$/.test(json.value)) {\n      return null // Don't save inter-element whitespace\n    }\n  }\n  if(children.length === 0) {\n    delete json.children\n  }\n  json.attributes = Object.fromEntries(\n    [...node.attributes ?? []].map((attr) => {\n      let value = attr.value\n      if(attr.name === 'style') {\n        value = Object.fromEntries(\n          attr.value.split(';').map(\n            (rule) => {\n              const [name, ...val] = rule.split(':')\n              return [camelCase(name.trim()), val.join().trim()]\n            }\n          )\n          .filter(e => e.some(t => /\\S/.test(t)))\n        )\n      }\n      return [attr.name, value]\n    })\n  )\n  if(Object.keys(json.attributes).length === 0) {\n    delete json.attributes\n  }\n  return json\n}\n\n// Dereference a CID if the node is one\nconst optDeref = async (node) => {\n  if(CID.isCID(node)) {\n    return (await ipfs.dag.get(node)).value\n  } else {\n    return node\n  } \n}\n\nconst cleanAttributes = async (attributes) => {\n  attributes = await optDeref(attributes ?? {})\n\n  const attrs = {}\n  for(let [name, val] of Object.entries(attributes)) {\n    attrs[name] = await optDeref(val)\n  }\n\n  if(attrs.style) {\n    const style = {}\n    for(let [prop, val] of (\n      Object.entries(attrs.style)\n    )) {\n      style[camelCase(prop, '-')] = val\n    }\n    attrs.style = style\n  }\n\n  if(attrs.class) {\n    attrs.className = attrs.class\n    delete attrs.class\n  }\n  for(let attr of ['xml:space', 'xmlns:xlink', 'xlink:href']) {\n    if(attrs[attr]) {\n      attrs[camelCase(attr, ':')] = attrs[attr]\n      delete attrs[attr]\n    }\n  }\n  for(let attr of [\n    'flood-opacity', 'flood-color', 'stop-color',\n  ]) {\n    if(attrs[attr]) {\n      attrs[camelCase(attr, '-')] = attrs[attr]\n      delete attrs[attr]\n    }\n  }\n\n  return attrs\n}\n\nexport const buildDOM = async (root, key = { val: 0 }) => {\n  if(root.type !== 'element') {\n    throw new Error(`Root Type: ${root.type}`)\n  }\n  const children = []\n  for(let child of Object.values(\n    await optDeref(root.children ?? [])\n  )) {\n    child = await optDeref(child)\n    if(child.type === 'element') {\n      const childChildren = await Promise.all(\n        Object.values(\n          await optDeref(child.children ?? [])\n        )\n        .map(optDeref)\n      )\n      if(\n        childChildren.length === 0\n        || childChildren.some(\n          (sub) => (\n            !['text', 'cdata'].includes(sub.type)\n          )\n        )\n      ) {\n        // if there are non-text nodes, recurse\n        children.push(await buildDOM(child, key))\n      } else {\n        // otherwise build a node\n        const attrs = await cleanAttributes(child.attributes)\n        attrs.key = ++key.val\n\n        const text = childChildren.map(c => c.value).join()\n        children.push(React.createElement(\n          child.name, attrs, text\n        ))\n      }\n    } else if(child.value && child.value.trim() !== '') {\n      console.error('Child', child.value)\n    }\n  }\n  const attrs = await cleanAttributes(root.attributes)\n  attrs.key = ++key.val\n  return React.createElement(\n    root.name, attrs, children.length > 0 ? children : null\n  )\n}\n","import loadable from '@loadable/component'\nimport {\n  Flex, ListItem, UnorderedList, Text, chakra,\n} from '@chakra-ui/react'\nimport { useState } from 'react'\nimport {\n  getDoc, domDFS, nodeToJSON, toDocTree, buildDOM, ipfs,\n} from './util'\n\nconst Counter = loadable(() => import('./Counter'))\n\nexport default () => {\n  const [content, setContent] = useState(null)\n\n  const load = async (evt) => {\n    const files = evt.target.files\n    const name = evt.target.value\n\n    if(files.length === 0) {\n      console.warn('No file is selected')\n      return\n    }\n\n    const doc = await getDoc(files[0])\n    if(doc === null) {\n      setContent(<h1>null Document</h1>)\n    } else if(typeof doc === 'string') {\n      // eslint-disable-next-line no-control-regex\n      if(/\\x00/.test(doc)) {\n        setContent(\n          <object data={`data:;base64,${btoa(doc)}`}>\n            <p>This was the binary object: {name}</p>\n          </object>\n        )\n      } else {\n        setContent(<pre>{doc}</pre>)\n      }\n    } else {\n      const json = domDFS(\n        doc.documentElement, nodeToJSON,\n      )\n      try {\n        const cid = await toDocTree(json)\n        const root = (await ipfs.dag.get(cid)).value\n        console.info(`CID for ${name}: ${cid.toString()}`)\n        const dom = await buildDOM(root)\n        setContent(dom)\n      } catch(err) {\n        console.warn('Error Building', err)\n        setContent(\n          <>\n            <Text>Unable to create object.</Text>\n            <Text>Error: <q>{err.message}</q></Text>\n            <Text>If the error is with CORS, try running the following from the command line:</Text>\n            <UnorderedList listStyleType=\"none\">\n              <ListItem _before={{ content: '\"$ \"' }}>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"http://localhost:3000\", \"http://127.0.0.1:5001\", \"https://webui.ipfs.io\"]'</ListItem>\n              <ListItem _before={{ content: '\"$ \"' }}>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"POST\"]'</ListItem>\n            </UnorderedList>\n          </>\n        )\n      }\n    }\n  }\n\n  return (\n    <Flex align=\"center\" direction=\"column\" mt={25}>\n      <chakra.input type=\"file\" onChange={load} fontSize={30}/>\n      {content}\n      <Counter/>\n    </Flex>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}