{"version":3,"sources":["util.js","App.jsx","reportWebVitals.js","index.js"],"names":["ipfs","ipfsClient","port","toDocTree","obj","a","out","Promise","all","Object","entries","map","key","val","dag","put","parsererrorNS","DOMParser","parseFromString","getElementsByTagName","namespaceURI","isParseError","doc","getElementsByTagNameNS","length","getDoc","file","resolve","reject","reader","FileReader","onload","event","parser","xml","target","result","html","b","i","arraysEqual","Array","from","firstChild","childNodes","n","localName","head","body","list","type","nodeType","allOfType","Node","TEXT_NODE","text","textContent","join","readAsText","domDFS","node","func","depth","child","filter","camelCase","str","sep","split","part","toUpperCase","slice","cleanAttributes","attributes","attrs","name","style","console","info","class","className","attr","optDeref","CID","isCID","get","value","buildDOM","root","Error","children","values","childChildren","some","sub","includes","push","c","React","createElement","trim","error","nodeName","nodeToJSON","json","ELEMENT_NODE","ATTRIBUTE_NODE","CDATA_SECTION_NODE","ENTITY_REFERENCE_NODE","ENTITY_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","NOTATION_NODE","test","fromEntries","rule","e","t","useState","content","setContent","load","evt","files","warn","data","btoa","documentElement","cid","toString","dom","message","listStyleType","_before","align","direction","mt","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ae0c174.chunk.js","sourcesContent":["import ipfsClient from 'ipfs-http-client'\nimport React from 'react'\nimport CID from 'cids'\n\nexport const ipfs = ipfsClient({ port: 5001 })\n\nexport const toIPLD = async (obj) => {\n  return await ipfs.dag.put(obj)\n}\n\nexport const toDocTree = async (obj) => {\n  const out = {}\n  await Promise.all(\n    Object.entries(obj).map(\n      async ([key, val]) => {\n        if(typeof val === 'object') {\n          out[key] = await toDocTree(val)\n        } else {\n          out[key] = val\n        }\n      }\n    )\n  )\n  return await ipfs.dag.put(out)\n}\n\nexport const arraysEqual = (a, b) => {\n  if(a === b) return true\n  if(a == null || b == null) return false\n  if(a.length !== b.length) return false\n\n  for(let i = 0; i < a.length; ++i) {\n    if(a[i] !== b[i]) return false\n  }\n  return true\n}\n\nexport const parsererrorNS = (() => (\n  (new DOMParser())\n  .parseFromString('INVALID', 'application/xml')\n  .getElementsByTagName('parsererror')[0]\n  .namespaceURI\n))()\n\nexport const isParseError = (doc) => (\n  doc.getElementsByTagNameNS(\n    parsererrorNS, 'parsererror'\n  ).length > 0\n)\n\n// Checks if all the elements in a list have the\n// same node type\nexport const allOfType = (list, type) => (\n  Array.from(list)\n  .all(n => n.nodeType === type)\n)\n\nexport const getDoc = (file) => (\n  new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onload = (event) => {\n      const parser = new DOMParser()\n      const xml = parser.parseFromString(\n        event.target.result, 'application/xml'\n      )\n      if(!isParseError(xml)) {\n        return resolve(xml)\n      }\n      const html = parser.parseFromString(\n        event.target.result, 'text/html'\n      )\n      if(isParseError(html)) {\n        return resolve(null)\n      }\n      if(\n        arraysEqual(\n          Array.from(html.firstChild.childNodes)\n          .map(n => n.localName),\n          ['head', 'body'],\n        )\n      ) {\n        const head = html.firstChild.firstChild\n        const body = html.firstChild.childNodes[1]\n        if(\n          head.childNodes.length === 0\n          && allOfType(\n            body.childNodes, Node.TEXT_NODE\n          )\n        ) {\n          const text = (\n            Array.from(body.childNodes)\n            .map(n => n.textContent)\n            .join()\n          )\n          return resolve(text)\n        }\n        return resolve(html)\n      }\n    }\n    reader.readAsText(file)\n  })\n)\n\nexport const domDFS = (node, func, depth = 1) => {\n  const result = (\n    Array.from(node.childNodes)\n    .map(child => domDFS(child, func, depth + 1))\n    .filter(n => !!n)\n  )\n  return func(node, result)\n}\n\nexport const camelCase = (str, sep = '-') => (\n  str.split(sep)\n  .map((part, i) => {\n    if(i === 0) {\n      return part\n    } else {\n      return part[0].toUpperCase() + part.slice(1)\n    }\n  })\n  .join('')\n)\n\nconst cleanAttributes = (attributes) => {\n  const attrs = {}\n  for(let [name, val] of Object.entries(attributes)) {\n    attrs[name] = val\n  }\n\n  if(attrs.style) {\n    console.info(attrs.style)\n  }\n\n  if(attrs.class) {\n    attrs.className = attrs.class\n    delete attrs.class\n  }\n  for(let attr of ['xml:space', 'xmlns:xlink', 'xlink:href']) {\n    if(attrs[attr]) {\n      attrs[camelCase(attr, ':')] = attrs[attr]\n      delete attrs[attr]\n    }\n  }\n  for(let attr of ['flood-opacity', 'flood-color']) {\n    if(attrs[attr]) {\n      attrs[camelCase(attr, '-')] = attrs[attr]\n      delete attrs[attr]\n    }\n  }\n\n  return attrs\n}\n\n// Dereference a CID if the node is one\nconst optDeref = async (node) => {\n  if(CID.isCID(node)) {\n    return (await ipfs.dag.get(node)).value\n  } else {\n    return node\n  } \n}\n\nexport const buildDOM = async (root, key = { val: 0 }) => {\n  if(root.type !== 'element') {\n    throw new Error(`Root Type: ${root.type}`)\n  }\n  const children = []\n  for(let child of Object.values(optDeref(root.children ?? {}))) {\n    if(child.type === 'element') {\n      const childChildren = Object.values(optDeref(child.children ?? []))\n      if(\n        childChildren.length === 0\n        || childChildren.some(\n          (sub) => (\n            !['text', 'cdata'].includes(sub.type)\n          )\n        )\n      ) {\n        // if there are non-text nodes, recurse\n        children.push(await buildDOM(child, key))\n      } else {\n        // otherwise build a node\n        const attrs = cleanAttributes(await optDeref(child.attributes))\n        attrs.key = ++key.val\n\n        const text = [...child.children].map(c => c.value).join()\n        children.push(React.createElement(\n          child.name, attrs, text\n        ))\n      }\n    } else if(child.value && child.value.trim() !== '') {\n      console.error('Child', child.value)\n    }\n  }\n  const attrs = cleanAttributes(await optDeref(root.attributes))\n  return React.createElement(\n    root.nodeName, attrs, children\n  )\n}\n\nexport const nodeToJSON = (node, children) => {\n  const json = {\n    name: node.localName, children,\n  }\n  json.type = ((() => {\n    switch(node.nodeType) {\n    case Node.ELEMENT_NODE: return 'element'\n    case Node.TEXT_NODE: return 'text'\n    case Node.ATTRIBUTE_NODE: return 'attribute'\n    case Node.CDATA_SECTION_NODE: return 'cdata'\n    case Node.ENTITY_REFERENCE_NODE: return 'reference'\n    case Node.ENTITY_NODE: return 'entity'\n    case Node.PROCESSING_INSTRUCTION_NODE: return 'instruction'\n    case Node.COMMENT_NODE: return 'comment'\n    case Node.DOCUMENT_NODE: return 'document'\n    case Node.DOCUMENT_TYPE_NODE: return 'doctype'\n    case Node.DOCUMENT_FRAGMENT_NODE: return 'fragment'\n    case Node.NOTATION_NODE: return 'notation'\n    default: return 'unknown'\n    }\n  })())\n  if(json.type === 'text' || json.type === 'cdata') {\n    delete json.name\n    json.value = node.textContent\n    if(/^\\n\\s*$/.test(json.value)) {\n      return null // Don't save inter-element whitespace\n    }\n  }\n  if(children.length === 0) {\n    delete json.children\n  }\n  json.attributes = Object.fromEntries(\n    [...node.attributes ?? []].map((attr) => {\n      let value = attr.value\n      if(attr.name === 'style') {\n        value = Object.fromEntries(\n          attr.value.split(';').map(\n            (rule) => {\n              const [name, ...val] = rule.split(':')\n              return [camelCase(name.trim()), val.join().trim()]\n            }\n          )\n          .filter(e => e.some(t => /\\S/.test(t)))\n        )\n      }\n      return [attr.name, value]\n    })\n  )\n  return json\n}\n","import { Flex, ListItem, UnorderedList, Text } from '@chakra-ui/react'\nimport { useState } from 'react'\nimport {\n  getDoc, domDFS, nodeToJSON, toDocTree, buildDOM, ipfs,\n} from './util'\nimport './App.css'\n\nexport default () => {\n  const [content, setContent] = useState(null)\n\n  const load = async (evt) => {\n    const files = evt.target.files\n    const name = evt.target.value\n\n    if(files.length === 0) {\n      console.warn('No file is selected')\n      return\n    }\n\n    const doc = await getDoc(files[0])\n    if(doc === null) {\n      setContent(<h1>null Document</h1>)\n    } else if(typeof doc === 'string') {\n      // eslint-disable-next-line no-control-regex\n      if(/\\x00/.test(doc)) {\n        setContent(\n          <object data={`data:;base64,${btoa(doc)}`}>\n            <p>This was the binary object: {name}</p>\n          </object>\n        )\n      } else {\n        setContent(<pre>{doc}</pre>)\n      }\n    } else {\n      const json = domDFS(\n        doc.documentElement, nodeToJSON,\n      )\n      try {\n        const cid = await toDocTree(json)\n        const root = (await ipfs.dag.get(cid)).value\n        console.info(<h1>CID for {name}: {cid.toString()}</h1>)\n        const dom = await buildDOM(root)\n        console.info(\"DOM\", dom)\n        setContent(dom)\n      } catch(err) {\n        console.warn('Error Building', err)\n        setContent(\n          <>\n            <Text>Unable to create object.</Text>\n            <Text>Error: <q>{err.message}</q></Text>\n            <Text>If the error is with CORS, try running the following from the command line:</Text>\n            <UnorderedList listStyleType=\"none\">\n              <ListItem _before={{ content: '\"$ \"' }}>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"http://localhost:3000\", \"http://127.0.0.1:5001\", \"https://webui.ipfs.io\"]'</ListItem>\n              <ListItem _before={{ content: '\"$ \"' }}>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"POST\"]'</ListItem>\n            </UnorderedList>\n          </>\n        )\n      }\n    }\n  }\n\n  return (\n    <Flex align=\"center\" direction=\"column\" mt={25}>\n      <input type=\"file\" onChange={load}/>\n      {content}\n    </Flex>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}