{"version":3,"sources":["utils/dom.js","utils/content.js","utils/types.js","utils/structures.js","CBOR-DAG.jsx","Ceramic.jsx","Build.jsx","About.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["ipfs","ipfsClient","protocol","host","port","ceramic","Ceramic","camelCase","str","sep","split","map","part","i","toUpperCase","slice","join","nodeToJSON","node","children","depth","left","right","json","name","localName","type","nodeType","Node","ELEMENT_NODE","TEXT_NODE","ATTRIBUTE_NODE","CDATA_SECTION_NODE","ENTITY_REFERENCE_NODE","ENTITY_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","NOTATION_NODE","value","textContent","test","length","attributes","Object","fromEntries","attr","rule","val","trim","filter","e","some","t","keys","optDeref","a","CID","isCID","dag","get","startsWith","TileDocument","load","content","console","warn","cleanAttributes","attrs","entries","style","prop","class","className","buildDOM","root","key","onBuildStart","onBuildEnd","onDOMStart","onDOMFinish","onLeaf","Error","Promise","values","all","child","parent","dom","push","includes","error","elem","React","createElement","parsererrorNS","DOMParser","parseFromString","getElementsByTagName","namespaceURI","isParseError","doc","getElementsByTagNameNS","getDoc","file","resolve","reject","reader","FileReader","onload","event","parser","xml","target","result","toString","html","firstChild","b","arraysEqual","Array","from","childNodes","n","head","body","list","typeOf","allOfType","text","readAsText","toTree","obj","leafFor","out","isArray","v","dfs","count","current","pre","step","nodeFor","childrenOf","forEach","isNum","maybe","fixViewBox","xmlns","w","width","h","height","viewBox","useState","setContent","docTransforms","timer","setTimer","status","setStatus","startTime","setStartTime","endTime","useRef","counter","useCallback","time","performance","now","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","requestAnimationFrame","useEffect","evt","files","data","btoa","documentElement","put","cid","to","message","align","direction","mt","maxW","textAlign","textIndent","title","listStyleType","_before","onChange","minH","fontSize","setCeramic","connecting","setConnecting","setError","messages","setMessages","log","msg","msgs","connect","threeIdConnect","ThreeIdConnect","window","ethereum","enable","addresses","authProvider","EthereumAuthProvider","did","DID","provider","getDidProvider","resolver","ThreeIdResolver","getResolver","authenticate","setDID","JSON","stringify","replace","create","deterministic","tile","commitId","toUrl","uri","color","encodeURIComponent","onClick","disabled","ForcedGraph","loadable","history","setDoc","nodes","links","graph","setGraph","paramRoot","useParams","queryRoot","URLSearchParams","useLocation","search","resolvedRoot","decodeURIComponent","formRoot","setFormRoot","setEndTime","total","setTotal","progress","setProgress","id","pid","source","p","rootObj","err","flexGrow","mr","as","onSubmit","path","autoFocus","placeholder","bg","ml","_placeholder","visibility","Link","RouterLink","Acronym","chakra","m","theme","extendTheme","config","initialColorMode","styles","global","textDecoration","basename","isOpen","isActive","Button","position","top","ChevronDown","Hamburger","exact","component","Build","About","CBOR","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.f27e6399.chunk.js","sourcesContent":["import ipfsClient from 'ipfs-http-client'\nimport React from 'react'\nimport CID from 'cids'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\n\nlet ipfs = (\n  ipfsClient({ protocol: 'http', host: 'localhost', port: 5001 })\n)\n\nconst ceramic = (\n  new Ceramic('https://ceramic-dev.3boxlabs.com')\n)\n\nexport const camelCase = (str, sep = '-') => (\n  str.split(sep)\n  .map((part, i) => {\n    if(i === 0) {\n      return part\n    } else {\n      return part[0].toUpperCase() + part.slice(1)\n    }\n  })\n  .join('')\n)\n\nexport const nodeToJSON = ({\n  node, children, depth, left, right\n}) => {\n  const json = {\n    name: node.localName, children,\n    depth, left, right,\n  }\n  json.type = ((() => {\n    switch(node.nodeType) {\n    case Node.ELEMENT_NODE: return 'element'\n    case Node.TEXT_NODE: return 'text'\n    case Node.ATTRIBUTE_NODE: return 'attribute'\n    case Node.CDATA_SECTION_NODE: return 'cdata'\n    case Node.ENTITY_REFERENCE_NODE: return 'reference'\n    case Node.ENTITY_NODE: return 'entity'\n    case Node.PROCESSING_INSTRUCTION_NODE: return 'instruction'\n    case Node.COMMENT_NODE: return 'comment'\n    case Node.DOCUMENT_NODE: return 'document'\n    case Node.DOCUMENT_TYPE_NODE: return 'doctype'\n    case Node.DOCUMENT_FRAGMENT_NODE: return 'fragment'\n    case Node.NOTATION_NODE: return 'notation'\n    default: return 'unknown'\n    }\n  })())\n  if(json.type === 'text' || json.type === 'cdata') {\n    delete json.name\n    json.value = node.textContent\n    if(/^\\n\\s*$/.test(json.value)) {\n      return null // Don't save inter-element whitespace\n    }\n  }\n  if(children.length === 0) {\n    delete json.children\n  }\n  json.attributes = Object.fromEntries(\n    [...node.attributes ?? []].map((attr) => {\n      let value = attr.value\n      if(attr.name === 'style') {\n        value = Object.fromEntries(\n          attr.value.split(';').map(\n            (rule) => {\n              const [name, ...val] = rule.split(':')\n              return [camelCase(name.trim()), val.join().trim()]\n            }\n          )\n          .filter(e => e.some(t => /\\S/.test(t)))\n        )\n      }\n      return [attr.name, value]\n    })\n  )\n  if(Object.keys(json.attributes).length === 0) {\n    delete json.attributes\n  }\n  return json\n}\n\n// Dereference a CID if the node is one\nconst optDeref = async (node) => {\n  try {\n    if(CID.isCID(node)) {\n      return (await ipfs.dag.get(node)).value\n    } else if(\n      typeof node === 'string'\n      && node.startsWith('ceramic://')\n    ) {\n      return (\n        (await TileDocument.load(ceramic, node)).content\n      )\n    }\n    return node\n  } catch(err) {\n    console.warn('ERR', err)\n    ipfs = ipfsClient({ host: 'ipfs.io', port: 443 })\n    return await optDeref(node)\n  }\n}\n\nconst cleanAttributes = async (attributes) => {\n  attributes = await optDeref(attributes ?? {})\n\n  const attrs = {}\n  for(let [name, val] of Object.entries(attributes)) {\n    attrs[name] = await optDeref(val)\n  }\n\n  if(attrs.style) {\n    const style = {}\n    for(let [prop, val] of (\n      Object.entries(attrs.style)\n    )) {\n      style[camelCase(prop, '-')] = val\n    }\n    attrs.style = style\n  }\n\n  if(attrs.class) {\n    attrs.className = attrs.class\n    delete attrs.class\n  }\n  for(let attr of ['xml:space', 'xmlns:xlink', 'xlink:href']) {\n    if(attrs[attr]) {\n      attrs[camelCase(attr, ':')] = attrs[attr]\n      delete attrs[attr]\n    }\n  }\n  // ToDo: switch this to a blacklist & convert everything else\n  for(let attr of [\n    'flood-opacity', 'flood-color', 'stop-color',\n    'clip-rule', 'stroke-miterlimit', 'stroke-linejoin',\n    'stroke-linecap', 'stroke-width', 'clip-path',\n    'fill-rule', 'font-size', 'font-family',\n    'enable-background',\n  ]) {\n    if(attrs[attr]) {\n      attrs[camelCase(attr, '-')] = attrs[attr]\n      delete attrs[attr]\n    }\n  }\n\n  return attrs\n}\n\nexport const buildDOM = async ({\n  root, key = { val: 0 },\n  onBuildStart = null, onBuildEnd = null,\n  onDOMStart = null, onDOMFinish = null,\n  onLeaf = null,\n}) => {\n  root = await optDeref(root)\n  if(root.type !== 'element') {\n    throw new Error(`Root Type: ${root.type}`)\n  }\n  if(root.depth === 1 && root.left === 1) {\n    onBuildStart?.({ root })\n  }\n  root.children = await Promise.all(\n    Object.values(\n      await optDeref(root.children ?? [])\n    )\n    .map(optDeref)\n  )\n  const children = []\n  for(let child of root.children) {\n    if(child.type === 'element') {\n      onDOMStart?.({ parent: root, child })\n      child.children = await Promise.all(\n        Object.values(\n          await optDeref(child.children ?? [])\n        )\n        .map(optDeref)\n      )\n      const dom = await (\n        buildDOM({\n          root: child, key,\n          onBuildStart, onBuildEnd,\n          onDOMStart, onDOMFinish,\n          onLeaf,\n        })\n      )\n      onDOMFinish?.({ parent: root, child, node: dom })\n      children.push(dom)\n    } else if(['text', 'cdata'].includes(child.type)) {\n      onLeaf({ parent: root, child })\n      children.push(child.value)\n    } else if(child?.value?.trim() !== '') {\n      console.error('Child', child)\n    }\n  }\n  const attrs = await cleanAttributes(root.attributes)\n  attrs.key = ++key.val\n  const elem = React.createElement(\n    root.name, attrs, children.length > 0 ? children : null\n  )\n  if(root.depth === 1 && root.left === 1) {\n    onBuildEnd?.(root, elem)\n  }\n  return elem\n}\n","import { arraysEqual, allOfType } from './types'\n\nexport const parsererrorNS = (() => (\n  (new DOMParser())\n  .parseFromString('INVALID', 'application/xml')\n  .getElementsByTagName('parsererror')[0]\n  .namespaceURI\n))()\n\nexport const isParseError = (doc) => (\n  doc.getElementsByTagNameNS(\n    parsererrorNS, 'parsererror'\n  ).length > 0\n)\n\n// Return the contents of a file returned from\n// a form input. It first tries as XML. If that\n// succeeds, the DOM is returned. Next HTML is\n// tried. Most files (txt, png, m4a, etc.) are\n// inserted into a simple HTML document. HTML\n// produces a DOM which is returned.\nexport const getDoc = (file) => (\n  new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onload = (event) => {\n      const parser = new DOMParser()\n      const xml = parser.parseFromString(\n        event.target.result.toString(), 'application/xml'\n      )\n      if(!isParseError(xml)) {\n        return resolve(xml)\n      }\n      const html = parser.parseFromString(\n        event.target.result.toString(), 'text/html'\n      )\n      if(isParseError(html)) {\n        return resolve(null)\n      }\n      // Browsers will wrap the contents of any\n      // file in a <html><head/><body>…</body></html>\n      // structure.\n      if(\n        html.firstChild.localName === 'html'\n        && arraysEqual(\n          Array.from(html.firstChild.childNodes)\n          .map(n => n.localName),\n          ['head', 'body'],\n        )\n      ) {\n        const head = html.firstChild.firstChild\n        const body = html.firstChild.childNodes[1]\n        if(\n          head.childNodes.length === 0\n          && allOfType(\n            body.childNodes, Node.TEXT_NODE\n          )\n        ) {\n          const text = (\n            Array.from(body.childNodes)\n            .map(n => n.textContent)\n            .join()\n          )\n          return resolve(text)\n        }\n        return resolve(html)\n      }\n    }\n    reader.readAsText(file)\n  })\n)\n","// Checks if all the elements in a list have the\n// same node type\nexport const allOfType = (\n  (list, type, typeOf = (n) => n.nodeType) => (\n    Array.from(list)\n    .all(n => typeOf(n) === type)\n  )\n)\n\nexport const arraysEqual = (a, b) => {\n  if(a === b) return true\n  if(a == null || b == null) return false\n  if(a.length !== b.length) return false\n\n  for(let i = 0; i < a.length; ++i) {\n    if(a[i] !== b[i]) return false\n  }\n  return true\n}\n","// Creates a sharded object where each level\n// is a separate document.\nexport const toTree = (\n  async ({\n    obj, leafFor = async (n) => n,\n  }) => {\n    const out = {}\n    await Promise.all(\n      Object.entries(obj).map(\n        async ([key, val]) => {\n          if(Array.isArray(val)) {\n            out[key] = await Promise.all(\n              val.map(async (v) => (\n                await toTree({ obj: v, leafFor })\n              ))\n            )\n          } else if(typeof val === 'object') {\n            out[key] = await toTree({ obj: val, leafFor })\n          } else {\n            out[key] = val\n          }\n        }\n      )\n    )\n    return await leafFor(out)\n  }\n)\n\n// Depth-first search\nexport const dfs = ({\n  node, depth = 1, count = { current: 1 },\n  pre = (..._) => {},\n  step = (..._) => {},\n  nodeFor = ({ node, ..._ }) => node,\n  childrenOf = (node) => Array.from(node.childNodes),\n}) => {\n  // SQL nested set model, \"right\" is count on exit\n  const left = count.current\n  pre(node, depth, left)\n  const children = []\n  childrenOf(node).forEach(\n    (child) => {\n      count.current++\n      const result = dfs({\n        node: child,\n        pre, step, nodeFor,\n        childrenOf,\n        depth: depth + 1, count,\n      })\n      if(result) {\n        children.push(result)\n        step({\n          node, children,\n          depth, left, right: count.current,\n        })\n      }\n    }\n  )\n  return nodeFor({\n    node, children,\n    depth, left, right: count.current,\n  })\n}\n","import {\n  Flex, ListItem, UnorderedList, Text, Input,\n} from '@chakra-ui/react'\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport ipfsClient from 'ipfs-http-client'\nimport { Link } from 'react-router-dom'\nimport { nodeToJSON } from './utils/dom'\nimport { getDoc } from './utils/content'\nimport { dfs, toTree } from './utils/structures'\n\nexport const ipfs = (\n  ipfsClient({ protocol: 'http', host: 'localhost', port: 5001 })\n)\n\nconst isNum = (maybe) => (\n  /^(\\d+\\.?\\d*)|(\\d*\\.?\\d+)$/.test(maybe)\n)\n\nconst fixViewBox = (json) => {\n  // without this images won't fill the frame\n  if(\n    json?.attributes?.xmlns\n    === 'http://www.w3.org/2000/svg'\n  ) {\n    const { width: w, height: h, viewBox: b } = (\n      json?.attributes\n    )\n    if(!b && isNum(w) && isNum(h)) {\n      json.attributes.viewBox = (\n        [0, 0, w, h].join(' ')\n      )\n    }\n    // ??= not supported by webpack\n    !w && (json.attributes.width = '100%')\n    !h && (json.attributes.height = '100%')\n  }\n}\n\nexport default () => {\n  const [content, setContent] = useState(null)\n  const docTransforms = [fixViewBox]\n  const [timer, setTimer] = useState(null)\n  const [status, setStatus] = useState(null)\n  const [startTime, setStartTime] = useState()\n  const endTime = useRef()\n\n  const counter = useCallback(() => {\n    if(startTime && !endTime.current) {\n      const δ = performance.now() - startTime\n      const time = δ.toLocaleString(\n        undefined,\n        { minimumFractionDigits: 2, maximumFractionDigits: 2 },\n      )\n      setTimer(`${time}ms`)\n      requestAnimationFrame(counter)\n    }\n  }, [startTime])\n  useEffect(() => { counter() }, [counter])\n\n  const load = async (evt) => {\n    setContent(null)\n    setStartTime(performance.now())\n    endTime.current = null\n\n    const files = evt.target.files\n    const name = evt.target.value\n\n    if(files.length === 0) {\n      throw new Error('No file is selected')\n    }\n\n    const doc = await getDoc(files[0])\n    if(doc === null) {\n      setContent(<h1><code>null</code> Document</h1>)\n    } else if(typeof doc === 'string') {\n      // eslint-disable-next-line no-control-regex\n      if(/\\x00/.test(doc)) {\n        setContent(\n          <object data={`data:;base64,${btoa(doc)}`}>\n            <p>This was the binary object: {name}</p>\n          </object>\n        )\n      } else {\n        setContent(<pre>{doc}</pre>)\n      }\n    } else {\n      const json = dfs({\n        node: doc.documentElement,\n        nodeFor: nodeToJSON,\n      })\n      try {\n        docTransforms.forEach(t => t(json))\n        const cid = await toTree({\n          obj: json,\n          leafFor: async (node) => (\n            await ipfs.dag.put(node)\n          ),\n        })\n        setStatus(\n          <Text>CID for {name}: <Link to  ={`/build/${cid}`}>{cid.toString()}</Link></Text>\n        )\n      } catch(err) {\n        console.warn('Error Building', err)\n        setContent(\n          <>\n            <Text>Unable to create object.</Text>\n            <Text>Error: <q>{err.message}</q></Text>\n            <Text>If the error is with fetching, try the CORS solution above.</Text>\n          </>\n        )\n      }\n    }\n    endTime.current = performance.now()\n  }\n\n  return (\n    <Flex align=\"center\" direction=\"column\" mt={25}>\n      <Flex direction=\"column\" maxW=\"35rem\" textAlign=\"justify\" style={{ textIndent: 20 }}>\n        <Text>Application to serialize a DOM tree to IPLD as a <acronym title=\"Common Binary Object Representation\">CBOR</acronym>-<acronym title=\"Directed Acylic Graph\">DAG</acronym> where each node is a separate document.</Text>\n        <Text>This program requires write access to an IPFS API endpoint. If you want to use it from the web, you'll need to be running a node locally &amp; whitelist <code>dysbulic.github.io</code>.</Text>\n        <UnorderedList listStyleType=\"none\" style={{ textIndent: -25 }}>\n          <ListItem _before={{ content: '\"$ \"' }}>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"webui://-\", \"http://localhost:3000\", \"http://127.0.0.1:5001\", \"https://webui.ipfs.io\", \"https://dysbulic.github.io\"]'</ListItem>\n          <ListItem _before={{ content: '\"$ \"' }}>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"POST\"]'</ListItem>\n        </UnorderedList>\n      </Flex>\n      <Input type=\"file\"\n        onChange={load}\n        minH=\"1.8em\" maxW={600} mt={6}\n        fontSize={30}\n      />\n      {timer}\n      {status}\n      {content}\n    </Flex>\n  )\n}","import {\n  Flex, Text, Input, Button, Spinner, Alert, AlertIcon,\n} from '@chakra-ui/react'\nimport React, {\n  useCallback, useEffect, useRef, useState,\n} from 'react'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport {\n  ThreeIdConnect, EthereumAuthProvider,\n} from '@3id/connect'\nimport ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { DID } from 'dids'\nimport { nodeToJSON } from './utils/dom'\nimport { getDoc } from './utils/content'\nimport { dfs, toTree } from './utils/structures'\nimport { Link } from 'react-router-dom'\n//import DocID from './docID.json'\n\nexport default () => {\n  const [content, setContent] = useState(null)\n  const [status, setStatus] = useState(null)\n  const [ceramic, setCeramic] = useState(null)\n  const [connecting, setConnecting] = useState(false)\n  const [timer, setTimer] = useState(null)\n  const [startTime, setStartTime] = useState()\n  const endTime = useRef()\n  const [error, setError] = useState(null)\n  const [messages, setMessages] = useState([])\n\n  const log = (msg) => setMessages(msgs => [...msgs, msg])\n\n  const counter = useCallback(() => {\n    if(startTime && !endTime.current) {\n      const δ = performance.now() - startTime\n      const time = δ.toLocaleString(\n        undefined,\n        { minimumFractionDigits: 2, maximumFractionDigits: 2 },\n      )\n      setTimer(`${time}ms`)\n      requestAnimationFrame(counter)\n    }\n  }, [startTime])\n  useEffect(() => { counter() }, [counter])\n\n  const connect = async () => {\n    try {\n      setConnecting(true)\n      const threeIdConnect = new ThreeIdConnect()\n      const addresses = await window.ethereum.enable()\n      const authProvider = new EthereumAuthProvider(\n        window.ethereum, addresses[0]\n      )\n      await threeIdConnect.connect(authProvider)\n      const ceramic = new Ceramic('https://d12-a-ceramic.3boxlabs.com')\n      const did = new DID({\n        provider: threeIdConnect.getDidProvider(),\n        resolver: ThreeIdResolver.getResolver(ceramic)\n      })\n      await did.authenticate()\n      ceramic.setDID(did)\n      setCeramic(ceramic)\n    } catch(err) {\n      setError(err.message)\n    }\n  }\n\n  const load = async (evt) => {\n    setContent(null)\n    setStartTime(performance.now())\n    endTime.current = null\n\n    const files = evt.target.files\n    const name = evt.target.value\n\n    if(files.length === 0) {\n      throw new Error('No file is selected')\n    }\n\n    const doc = await getDoc(files[0])\n    if(doc === null) {\n      setContent(<h1><code>null</code> Document</h1>)\n    } else if(typeof doc === 'string') {\n      // eslint-disable-next-line no-control-regex\n      if(/\\x00/.test(doc)) {\n        setContent(\n          <object data={`data:;base64,${btoa(doc)}`}>\n            <p>This was the binary object: {name}</p>\n          </object>\n        )\n      } else {\n        setContent(<pre>{doc}</pre>)\n      }\n    } else {\n      const json = dfs({\n        node: doc.documentElement,\n        nodeFor: nodeToJSON,\n      })\n      try {\n        const uri = await toTree({\n          obj: json,\n          leafFor: async (node) => {\n            log(`Writing: ${JSON.stringify(node).replace(/\",\"/g, '\", \"')}`)\n            const tile = (\n              await TileDocument.create(\n                ceramic, node, { deterministic: true }\n              )\n            )\n            return tile.commitId.toUrl()\n          },\n        })\n        setStatus(\n          <Text color=\"lightgreen\">URI for {name}: <Link to={`/build/${encodeURIComponent(uri)}`}>{uri}</Link></Text>\n        )\n      } catch(err) {\n        console.warn('Error Building', err)\n        setContent(\n          <>\n            <Text>Unable to create object.</Text>\n            <Text>Error: <q>{err.message}</q></Text>\n          </>\n        )\n      }\n    }\n    endTime.current = performance.now()\n  }\n\n  return (\n    <Flex align=\"center\" direction=\"column\" mt={25}>\n      <Text>This program serializes a <acronym title=\"Document Object Model\">DOM</acronym> to the Ceramic Network with each node in a separate document.</Text>\n      {error && <Alert status=\"error\" maxW=\"35rem\"><AlertIcon /> {error}</Alert>}\n      {!ceramic ? (\n        <Button\n          mt={7}\n          onClick={connect}\n          disabled={connecting}\n        >\n          {connecting ? (\n            <Spinner/>\n          ) : (\n            'Connect Your Wallet'\n          )}\n        </Button>\n      ) : (\n        <>\n          <Input type=\"file\"\n            onChange={load}\n            minH=\"1.8em\" maxW={600} mt={6}\n            fontSize={30}\n          />\n          {timer}\n          {status}\n          {content}\n          <ul>{messages.map((msg, i) => (\n            <li key={i}>{msg}</li>\n          ))}</ul>\n        </>\n      )}\n    </Flex>\n  )\n}","import {\n  Flex, Input, Text, Box, Progress,\n} from '@chakra-ui/react'\nimport loadable from '@loadable/component'\nimport CID from 'cids'\nimport React, {\n  useEffect, useState, useCallback,\n} from 'react'\nimport { useParams } from 'react-router'\nimport { useLocation } from 'react-router-dom'\nimport { buildDOM } from './utils/dom'\n\nconst ForcedGraph = (\n  loadable(() => import('./ForcedGraph'))\n)\n\nconst useQuery = () => (\n  new URLSearchParams(useLocation().search)\n)\n\nexport default ({ history }) => {\n  const [doc, setDoc] = useState(null)\n  const [graph, setGraph] = (\n    useState({ nodes: [], links: []})\n  )\n  const { root: paramRoot } = useParams()\n  const queryRoot = useQuery().get('root')\n  const resolvedRoot = paramRoot ?? queryRoot\n  const root = resolvedRoot && decodeURIComponent(\n    resolvedRoot\n  )\n  const [formRoot, setFormRoot] = useState('')\n  const [startTime, setStartTime] = useState(0)\n  const [endTime, setEndTime] = useState(0)\n  const [total, setTotal] = useState(1)\n  const [progress, setProgress] = useState(1)\n\n  const onBuildStart = ({ root }) => {\n    const id = `${root.left}:${root.right}`\n    const nodes = [{ id, name: root.name }]\n    const links = []\n    setTotal(root.right / 2)\n    setProgress(1)\n    setDoc(null)\n    setGraph({ nodes, links })\n    setStartTime(performance.now())\n    setEndTime(null)\n  }\n  const onDOMStart = ({ parent, child }) => {\n    const pid = `${parent.left}:${parent.right}`\n    const cid = `${child.left}:${child.right}`\n    setGraph(({ nodes = [], links = [] }) => ({\n      nodes: [\n        ...nodes,\n        { id: cid, name: child.name },\n      ],\n      links: [\n        ...links,\n        { source: pid, target: cid },\n      ],\n    }))\n    setProgress(p => p + 1)\n  }\n  const onBuildEnd = () => {\n    // total === 1 w/o wrapping\n    setTotal(t => {\n      setProgress(t)\n      return t\n    })\n    setEndTime(performance.now())\n  }\n  const onSubmit = () => {\n    const path = (\n      `/build/${encodeURIComponent(formRoot)}`\n    )\n    history.push(path)\n  }\n\n  const load = useCallback(\n    async () => {\n      try {\n        let rootObj\n        try {\n          rootObj = new CID(root)\n        } catch(err) {\n          if(root?.startsWith('ceramic://')) {\n            rootObj = root\n          }\n        }\n        if(root && !rootObj) {\n          console.warn('Unknown Root', root)\n        }\n        if(rootObj) {\n          setDoc(await buildDOM({\n            root: rootObj,\n            onBuildStart, onDOMStart,\n            onLeaf: onDOMStart,\n            onBuildEnd,\n          }))\n        }\n      } catch(err) {\n        console.error('Load Error', err)\n      }\n    }, [root]\n  )\n  useEffect(() => { load() }, [load])\n\n  const time = (\n    (endTime ?? performance.now()) - (startTime ?? 0)\n  )\n\n  return (\n    <Flex direction=\"column\" align=\"center\">\n      {root ? (\n        <>\n          <Text>\n            Loading: {root}\n            <span> </span>\n            ({time.toLocaleString()}ms)\n          </Text>\n          <Progress\n            w=\"75%\"\n            value={(progress / total) * 100}\n          />\n          <Flex w=\"100%\" h=\"90vh\">\n            <ForcedGraph\n              {...{ graph }}\n              flexGrow={1} mr={100}\n            />\n            {doc}\n          </Flex>\n        </>\n      ) : (\n        <Box\n          as=\"form\"\n          id=\"cid\"\n          w=\"100%\"\n          {...{ onSubmit }}\n        >\n          <Input\n            value={formRoot ?? ''}\n            onChange={\n              (evt) => setFormRoot(evt.target.value)\n            }\n            autoFocus\n            placeholder=\"IPFS Content ID or Ceramic URI\"\n            bg=\"white\"\n            color=\"black\"\n            ml={20} mt={6}\n            maxW=\"93%\"\n            _placeholder={{ color: '#333' }}\n          />\n          <Input type=\"submit\" visibility=\"hidden\"/>\n        </Box>\n      )}\n    </Flex>\n  )\n}","import {\n  Flex, Heading, ListItem, Text, UnorderedList,\n  Link as ChakraLink, chakra,\n} from '@chakra-ui/react'\nimport React from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\n\nconst Link = ({ children, to }) => (\n  <ChakraLink\n    as={RouterLink}\n    {...{ to }}\n  >{children}</ChakraLink>\n)\n\nconst Acronym = chakra('acronym')\n\nexport default () => (\n  <Flex\n    maxW=\"50rem\" m=\"auto\" fontSize={20} direction=\"column\" align=\"center\"\n  >\n    <Heading m={10}>XML to IPLD Converter</Heading>\n    <Text style={{ textIndent: 25, textAlign: 'justify' }}>This program takes an XML document, converts it into an <Acronym title=\"Interplanetary Filesystem\">IPFS</Acronym> <Acronym title=\"Directed Acyclic Graph\">DAG</Acronym> representing the <Acronym title=\"Document Object Model\">DOM</Acronym> where each node is a separate document linked to the others by <Acronym title=\"Content Identifier\">CID</Acronym>s. The program then walks the <Acronym title=\"Common Binary Object Representation\">CBOR</Acronym> structure and rebuilds the DOM tree.</Text>\n    <Text style={{ textIndent: 25, textAlign: 'justify' }} mt={5}>This method of storage has some interesting properties having to do with reusing unchanged subgraphs &amp; minimizing document size. The question was how long will it take to load, thus this program.</Text>\n    <Flex w=\"100%\" align=\"flex-start\" direction=\"column\">\n      <Text mt={5}>Examples:</Text>\n      <UnorderedList>\n        <ListItem><Link to=\"/build/bafyreiadbcuiiwmdhzca2ajxwjgguwjyidujex2ptfu77rpidyt65lsm5e\">Gazoo</Link> <i>(~20 CBOR nodes)</i></ListItem>\n        <ListItem><Link to=\"/build/bafyreigrpczkdehmrc4t3fl64amaelrxdogh4femcu6j6g43kyvorqz7cq\">MetaGame Flag</Link> <i>(~30 CBOR nodes)</i></ListItem>\n        <ListItem><Link to=\"/build/ceramic%3A%2F%2Fk3y52l7qbv1fryb0xtwadtq0z31win1rgiux03gme0t6ixa6oryayfimfohotv7y8\">MetaGame Flag</Link> <i>(~30 Ceramic nodes)</i></ListItem>\n        <ListItem><Link to=\"/build/bafyreif645kruyhewydqwyjpor6z24mu3dzj2jsi6f2w57xoxcmnlf4ypa\">Linux Fox</Link> <i>(~150 CBOR nodes)</i></ListItem>\n        <ListItem><Link to=\"/build/bafyreiepdlskoh2ogf63cfbjccjpz7xtporqwoo4sna77tz3modfttu7p4\">Chakras</Link> <i>(1000+ CBOR nodes)</i></ListItem>\n        <ListItem><Link to=\"/build/bafyreifnikp6jlpzph7hqwwpz6wa6lqoos5ky45j56ivdv3cgrt7joc7gy\">Income Distribution in 2007</Link></ListItem>\n      </UnorderedList>\n    </Flex>\n  </Flex>\n)","import React from 'react'\nimport {\n  HashRouter as Router, Switch, Route,\n  Link as RouterLink,\n} from 'react-router-dom'\nimport {\n  ChakraProvider, extendTheme, Menu, MenuItem,\n  MenuButton, Button, MenuList, Link as ChakraLink,\n  chakra,\n} from '@chakra-ui/react'\nimport {\n  ChevronDownIcon, HamburgerIcon\n} from '@chakra-ui/icons'\nimport CBOR from './CBOR-DAG'\nimport Ceramic from './Ceramic'\nimport Build from './Build'\nimport About from './About'\n\nconst overrides = {\n  config: {\n    initialColorMode: 'dark',\n  },\n  styles: {\n    global: {\n      body: {\n        minH: '100vh',\n      },\n      a: {\n        textDecoration: 'underline',\n      },\n    },\n  },\n}\nconst theme = extendTheme(overrides)\n\nconst Acronym = chakra('acronym')\nconst Link = ({ children, to }) => (\n  <ChakraLink\n    as={RouterLink}\n    {...{ to }}\n    w='100%'\n  >{children}</ChakraLink>\n)\n\nexport default () => (\n  <ChakraProvider theme={theme}>\n    <Router basename='/'>\n      <Menu>\n        {({ isOpen }) => (\n          <>\n            <MenuButton\n              isActive={isOpen} as={Button}\n              position='fixed' top='1rem' left='1rem'\n            >\n              {isOpen ? <ChevronDownIcon/> : <HamburgerIcon/>}\n            </MenuButton>\n            <MenuList>\n            <MenuItem>\n                <Link to='/'>🏡 Store as CBOR-DAG</Link>\n              </MenuItem>\n              <MenuItem>\n                <Link to='/ceramic'>🎡 Store as Ceramic</Link>\n              </MenuItem>\n              <MenuItem>\n                <Link to='/build'>✍ Build from DAG</Link>\n              </MenuItem>\n              <MenuItem>\n                <Link to='/about'>📰 About</Link>\n              </MenuItem>\n            </MenuList>\n          </>\n        )}\n      </Menu>\n      <Switch>\n        <Route\n          path='/build/:root?'\n          exact={false}\n          component={Build}\n        />\n        <Route path='/about' component={About}/>\n        <Route path='/ceramic' component={Ceramic}/>\n        <Route\n          path='/'\n          exact={false}\n          component={CBOR}\n        />\n      </Switch>\n    </Router>\n  </ChakraProvider>\n)","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ChakraProvider } from '@chakra-ui/react'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}