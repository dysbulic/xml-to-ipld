{"version":3,"sources":["ForcedGraph.jsx"],"names":["color","d3","graph","props","useState","updating","setUpdating","svg","useRef","chart","setChart","useEffect","domNode","attr","simulation","force","strength","id","d","distance","on","node","x","y","link","source","target","append","selectAll","rezoom","bounds","getBBox","width","height","Object","assign","update","nodes","links","old","Map","data","map","get","join","enter","text","name","select","this","parentNode","alpha","restart","chartOn","current","ref","onMouseDown","onMouseUp"],"mappings":"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","file":"static/js/4.732c3a57.chunk.js","sourcesContent":["import * as d3 from 'd3'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { chakra } from '@chakra-ui/react'\n\nconst color = d3.scaleOrdinal(d3.schemeTableau10)\n\nconst width = 640\nconst height = 480\n\nconst chartOn = (domNode) => {\n  const svg = (\n    d3.select(domNode)\n    .attr('viewBox', [-width / 2, -height / 2, width, height])\n    .attr('width', '100%')\n    .attr('height', '100%')\n  )\n  const simulation = (\n    d3.forceSimulation()\n    .force('charge', d3.forceManyBody().strength(-1000))\n    .force('link', d3.forceLink().id(d => d.id).distance(200))\n    .force('x', d3.forceX())\n    .force('y', d3.forceY())\n    .on('tick', ticked)\n  )\n  let link = (\n    svg.append('g')\n    .attr('stroke', '#FFF')\n    .attr('stroke-width', 1.5)\n    .selectAll('line')\n  )\n  let node = (\n    svg.append('g')\n    .attr('stroke', '#FFF')\n    .attr('stroke-width', 1.5)\n    .selectAll('circle')\n  )\n\n  function ticked() {\n    node\n    .attr('cx', d => d.x)\n    .attr('cy', d => d.y)\n\n    link\n    .attr('x1', d => d.source.x)\n    .attr('y1', d => d.source.y)\n    .attr('x2', d => d.target.x)\n    .attr('y2', d => d.target.y)\n  }\n\n  const rezoom = () => {\n    const bounds = svg.node().getBBox()\n    const { x, y, width, height } = bounds\n    svg.attr('viewBox', [x, y, width, height])\n  }\n\n  const update = ({ nodes, links }) => {\n    // Make a shallow copy to protect against mutation, while\n    // recycling old nodes to preserve position and velocity.\n    //console.info({ nodes, links })\n    const old = new Map(node.data().map(d => [d.id, d]))\n    nodes = nodes.map(d => Object.assign(old.get(d.id) || {}, d))\n    links = links.map(d => Object.assign({}, d))\n\n    node = (\n      node.data(nodes, d => d.id)\n      .join((enter) => (\n        enter.append('circle')\n        .attr('r', 8)\n        .attr('fill', d => color(d.id))\n        .append('title')\n        .text(d => `${d.name} (${d.id})`)\n        .select(function () { return this.parentNode })\n      ))\n    )\n    link = (\n      link.data(links, d => [d.source, d.target])\n      .join('line')\n    )\n\n    simulation.nodes(nodes)\n    simulation.force('link').links(links)\n    simulation.alpha(1).restart()\n\n    rezoom()\n  }\n\n  return Object.assign(svg.node(), { update, rezoom })\n}\n\nexport default ({\n  graph, ...props\n}) => {\n  const [updating, setUpdating] = useState(true)\n  const svg = useRef()\n  const [chart, setChart] = useState()\n\n  useEffect(() => {\n    setChart(chartOn(svg.current))\n  }, [])\n\n  useEffect(() => {\n    graph && updating && chart?.update(graph)\n  }, [chart, graph])\n\n  return (\n    <chakra.svg\n      {...props}\n      ref={svg}\n      onMouseDown={() => setUpdating(false) }\n      onMouseUp={() => setUpdating(true) }\n    />\n  )\n}"],"sourceRoot":""}